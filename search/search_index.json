{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to Enc Code Snippets, a site to store code snippets that can be used in the Encompass Loan Origination System. The hope is that the snippets found here can help act as a boiling plate for code that you may need.</p> <p>Note</p> <p>While there are some very specific use cases listed in each section, the goal of these snippets are not to provide an specific solution for a problem but to provide a set of code that can be pulled from and used to help tackle a problem you are being asked to solve.</p> <p>Please note that there are snippets from various forms, all I wanted to do was gather them together to hopefully make it easier to find a chunk of code as needed.</p>"},{"location":"#current-sections","title":"Current Sections","text":"<ul> <li>Input Form Builder</li> <li>Field Trigger Rules</li> </ul>"},{"location":"FTR/","title":"Field Trigger Rules","text":""},{"location":"FTR/#overview","title":"Overview","text":"<p>Code found in this section can be used in the Advance Code section of Field Trigger Rules. Each section will try to introduce a snippet of code and then explain how it can be used. While code can be copied from this site it should be updated to reflect your need.</p> <p>Important</p> <p>As with any code copied make sure to update and understand what it is doing before deploying to a production environment.</p>"},{"location":"FTR/BorrowerPairs/","title":"Working with Borrower Pairs","text":""},{"location":"FTR/BorrowerPairs/#overview","title":"Overview","text":"<p>There may be times that we need to loop through the fields of all borrower pairs on a loan and take action either on tha borrower pair or update a field based on if a condition is meet. We can do this by looping through our borrowers and using an index with the field ID to accomplish this. A field with an index looks like a normal field but has a # after teh field ID, for example [4000#2] is the borrowers first name from the loans second borrower pair.</p>"},{"location":"FTR/BorrowerPairs/#code","title":"Code","text":"<p>Something like below looks at each borrowers last name and if it matches a value then it updates that borrowers first name.</p> <pre><code>'Bypass PAF rule\nIgnoreValidationErrors\n\n'Loop through the borrower paris starting at index 1 and going\n'to max borrower pair which is stored in field 4460\nFor b As Integer = 1 To [4460]\n    'We use Fields here to get the field information so that we\n    'can concatinate the index value\n    If Fields(\"4002#\" &amp; b.ToString()) = \"LastName\" Then\n        'We can use the same index to update fields for\n        'that borrower pair\n        Fields(\"4000#\" &amp; b.ToString()) = \"FirstName\"\n    End If\nNext\n</code></pre> <p>Note</p> <p>Up until Encompass release 23.3 field 4460 had a issue where it would not update to the actual borrower count until the loan was saved and reopened. ICE has fixed this and this field should now have an accurate count of borrowers.</p>"},{"location":"FTR/BorrowerPairs/#pre-233","title":"Pre 23.3","text":"<p>Before Encompass release 23.3 field 4460 could contain an inaccurate count of borrower pairs. To get around this we could use very similar code but needed to look at a field to validate that the borrower pair had data in it before running our other code. The below code does the same but instead of using 4460 it assumes the max number of pairs, which is 6, and before running our update code it first checks to see if the borrowers first name in that pair has a value.</p> <pre><code>'Bypass PAF rule\nIgnoreValidationErrors\n\n'Loop through the borrower paris starting at index 1 and going\n'to max borrower pair which is 6\nFor b As Integer = 1 To 6\n    'Check to see if borrower first name is in the loan before\n    'trying to update\n    If Fields(\"4000#\" &amp; b.ToString()) &lt;&gt; Nothing Then\n        'We use Fields here to get the field information so that we\n        'can concatinate the index value\n        If Fields(\"4002#\" &amp; b.ToString()) = \"LastName\" Then\n            'We can use the same index to update fields for\n            'that borrower pair\n            Fields(\"4000#\" &amp; b.ToString()) = \"FirstName\"\n        End If\n    End If\nNext\n</code></pre>"},{"location":"FTR/Casting/","title":"Casting Fields","text":""},{"location":"FTR/Casting/#overview","title":"Overview","text":"<p>When working with fields in a business rule there are times where we need to make sure that we are working with the expected data type. While Encompass will try to return the correct data type based on teh field type when just using square brackets, sometimes we need to change that data type to work with or for comparison. Using casting we can change one data type into another. The table below shows the modifiers to add to the field along with the data type returned.</p> Modifier Data Type Returned @ DateTime # Integer/Decimal - Unformatted String + Formatted String <p>Below are examples of casting that can be used not only in field trigger rules but in conditions and advanced code of other rule types.</p>"},{"location":"FTR/Casting/#datetime","title":"DateTime","text":"<p>The At Sign (@) can be used to cast an field to a date if possible. Example of this would be [@CX.MY.DATETIME] where we are casting the value of the custom field CX.MY.DATETIME to a date type.</p> <p>Note</p> <p>If the value of the field being cast cannot be parsed into a valid date the value returned would be 1/1/0001 12:00:00 AM</p>"},{"location":"FTR/Casting/#example-date-cast","title":"Example Date Cast","text":"<p>For the example below we are going to assume that the CX.MY.DATETIME field is setup as a string data type so that it can capture both the date and time that a button was clicked on a form. If we tried to check to see if the field was after a certain date by just using [CX.MY.DATETIME] an runtime error would occur trying to convert a string to a date. We can fix this with the @ modifier to cast CX.MY.DATETIME to a date.</p> <pre><code>'Check to see if date time is after first of year\nIf [@CX.MY.DATETIME] &gt;= #01/01/2024# Then\n    'do something here\nEnd If\n</code></pre> <p>We can also check to see if the field has a date by using the IsDate function. Note that when doing this we do not want the cast, because if we did then if the fields value could not be parsed to a date it would default to 01/01/0001 which would causing IsDate to always return True.</p> <pre><code>'Check to see if field has date\nIf IsDate([CX.MY.DATETIME]) Then\n    'do something based on having date\nEnd If\n</code></pre>"},{"location":"FTR/Casting/#integerdecimal","title":"Integer/Decimal","text":"<p>The Number sign (#) can be used cast a field to a integer or decimal if possible. If we wanted to cast the CX.MY.NUMBER field to a integer or a decimal we would use this [#CX.MY.NUMBER]. In this example if CX.MY.NUMBER was the string 2 then the integer 2 would be returned, while if the value was the string 2.0 then the decimal 2.0 would be returned. This can be handy when comparing fields or functions/math that require a numeric data type.</p> <p>Note</p> <p>If the value of the field being cast cannot be parsed into a valid integer or decimal the value returned would be 0</p>"},{"location":"FTR/Casting/#example-number-cast","title":"Example Number Cast","text":"<p>For the example below we are going to assume that the CX.MY.NUMBER field is setup as a string data type. If we tried to use the value just from the [CX.MY.NUMBER] call we could end up with a runtime error trying to convert a string to a number. We can fix this with the # modifier to cast CX.MY.NUMBER to a integer or decimal.</p> <pre><code>'Check to see if my number is greater than 2\nIf [#CX.MY.NUMBER] &gt; 2 Then\n    'do something\nEnd If\n</code></pre> <p>We can also check to see if the field's value is integer or decimal by using the IsNumeric function. Note that when doing this we do not want to use the cast because if we did then if the fields value could nto be parsed to a integer or decimal it would default to 0 which would cause IsNumeric to always return True.</p> <pre><code>'Check to see if field is a number\nIf IsNumeric([CX.MY.NUMBER]) Then\n    'do something based on being a number\nEnd If\n</code></pre>"},{"location":"FTR/Casting/#strings","title":"Strings","text":"<p>There are two modifiers that can be used to retrieve the formatted and unformatted value of a field. The Minus sign (-) returns the unformatted string, while the Plus sign (+) retruns the formatted string. The data type returned for both of these is the string data type. The below shows an example of these cast being used and the resulting string.</p> <pre><code>'Original value in the CX.MY.DECIMAL field is 46,000.23\n[CX.MY.STRING] = [+CX.MY.DECIMAL] 'CX.MY.STRING set to 46,000.23\n[CX.MY.STRING] = [-CX.MY.DECIMAL] 'CX.MY.STRING set to 46000.23\n\n'Original value in the CX.MY.INTEGER field is 1,234\n[CX.MY.STRING] = [+CX.MY.INTEGER] 'CX.MY.STRING set to 1,234\n[CX.MY.STRING] = [-CX.MY.INTEGER] 'CX.MY.STRING set to 1234\n\n'Original value in the CX.MY.DATE field is 01/01/2024\n[CX.MY.STRING] = [+CX.MY.DATE] 'CX.MY.STRING set to 01/01/2024\n[CX.MY.STRING] = [-CX.MY.DATE] 'CX.MY.STRING set to 01/01/2024\n\n'Original value in the CX.MY.DECIMAL field is 0\n[CX.MY.STRING] = [+CX.MY.DECIMAL] 'CX.MY.STRING set to 0.00\n[CX.MY.STRING2] = [-CX.MY.DECIMAL] 'CX.MY.STRING set to 0.00\n\n'Original value in the CX.MY.INTEGER field is 0\n[CX.MY.STRING] = [+CX.MY.INTEGER] 'CX.MY.STRING set to 0\n[CX.MY.STRING] = [-CX.MY.INTEGER] 'CX.MY.STRING set to 0\n\n\n'Original value in the CX.MY.DATE field is 01/01/2024\n[CX.MY.STRING] = [+CX.MY.DATE] 'CX.MY.STRING set to //\n[CX.MY.STRING] = [-CX.MY.DATE] 'CX.MY.STRING set to blank\n</code></pre> <p>We can check for an empty or blank string by using the IsEmpty function. Based on the examples above the only cast that may help is to cast a date field using the minus sign (unformatted), that way if there was no date it would return an blank value (although the IsDate function may be safer). Below is an example of how to call the IsEmpty function.</p> <pre><code>'Check to see if the field is blank\nIf IsEmpty([CX.MY.STRING]) Then\n    'do something based on being blank or empty\nEnd If\n</code></pre>"},{"location":"FTR/DateComparison/","title":"Date Comparison","text":""},{"location":"FTR/DateComparison/#overview","title":"Overview","text":"<p>The below demonstrates how to loop through a list of date fields and find the minimum and maximum date.</p>"},{"location":"FTR/DateComparison/#minimum-date","title":"Minimum Date","text":"<pre><code>'List of dates that we would like to compare\n'The @ symbol is used to cast the field to a date\nDim dates() As DateTime = {[@761], [@762], [@763]}\n\n'Establish an starting minDate\nDim minDate As DateTime = New DateTime(3000, 1, 1)\n\n'Loop through dates\nFor Each d As DateTime In dates\n    'If the date is not blank\n    If d &lt;&gt; \"01/01/0001\" Then\n        'Check to see if the date is less then minDate\n        If d &lt; minDate Then\n            'Update minDate to new minimual date\n            minDate = d\n        End If\n    End If\nNext\n\n'If minDate is still the same as what we\n'set it to initial then no minDate found\nIf minDate = \"1/1/3000\" Then\n    [CX.CUSTOMFIELD] = \"No min date found\"\n'Else minDate found and we can do something with it\nElse\n    [CX.CUSTOMFIELD] = minDate\nEnd If\n</code></pre>"},{"location":"FTR/DateComparison/#maximum-date","title":"Maximum Date","text":"<pre><code>'List of dates that we would like to compare\nDim dates() As DateTime = {[@761], [@762], [@763]}\n\n'Establish an starting minDate\nDim maxDate As DateTime = New DateTime(1990, 1, 1)\n\n'Loop through dates\nFor Each d As DateTime In dates\n    'If the date is not blank\n    If d &lt;&gt; \"01/01/0001\" Then\n        'Check to see if the date is less then maxDate\n        If d &gt; maxDate Then\n            'Update maxDate to new minimual date\n            maxDate = d\n        End If\n    End If\nNext\n\n'If maxDate is still the same as what we\n'set it to initial then no maxDate found\nIf maxDate = \"1/1/1990\" Then\n    [CX.CUSTOMFIELD] = \"No max date found\"\n'Else maxDate found and we can do something with it\nElse\n    [CX.CUSTOMFIELD] = maxDate\nEnd If\n</code></pre>"},{"location":"FTR/FirstEmptyField/","title":"First Empty Field","text":""},{"location":"FTR/FirstEmptyField/#overview","title":"Overview","text":"<p>There are times were we want to loop through a set of fields and find the first available field to populate data into.</p>"},{"location":"FTR/FirstEmptyField/#text-fields","title":"Text Fields","text":"<p>The below demonstrates this using lines 808 to 810 on the 2015 itemization to find the first line without a description and then populate the line based on that found field. If no lines are empty the user is then giving a message and asked to populate the fee manually.</p> <pre><code>'Bypass PAF rules\nIgnoreValidationErrors\n\n' Declare variables to use\nDim foundField As String\nDim feeDescr As String = \"Fee Description\"\nDim feePaidToName As String = \"Paid To\"\nDim feeBorr As Integer = 35\nDim feeAPR As String = \"Y\" 'Can be Y or N\nDim feePaidTo As String = \"Other\" 'Can be Broker, Lender, Seller, Investor, Affiliate, or Other\n\n' Array of field ids\nDim discFields() As String = {\"NEWHUD.X126\", \"NEWHUD.X127\", \"NEWHUD.X128\"}\n\n' Loop through each field and find the first one that does not have a\n' description populated\nFor Each f As String In discFields\n    If isEmpty(Fields(f)) Then\n        foundField = f\n        Exit For\n    End If\nNext\n\n' Case statment to populate the found field as indicated else pop-up message\nSelect Case foundField\n\nCase \"NEWHUD.X126\"\n\n       [NEWHUD.X126] = feeDescr\n       [NEWHUD.X1050] = feePaidToName\n       [NEWHUD.X136] = feeBorr\n       [NEWHUD.X179] = feeAPR\n       [NEWHUD.X189] = feePaidTo\n\nCase \"NEWHUD.X127\"\n\n       [NEWHUD.X127] = feeDescr\n       [NEWHUD.X1051] = feePaidToName\n       [NEWHUD.X137] = feeBorr\n       [NEWHUD.X180] = feeAPR\n       [NEWHUD.X190] = feePaidTo\n\nCase \"NEWHUD.X128\"\n\n       [NEWHUD.X128] = feeDescr\n       [NEWHUD.X1052] = feePaidToName\n       [NEWHUD.X138] = feeBorr\n       [NEWHUD.X181] = feeAPR\n       [NEWHUD.X191] = feePaidTo\n\nCase Else\n\n       MsgBox(\"There are no available lines in the 808 to 810 to add the fee, please add manually.\", 48, \"Fee not added\")\n\nEnd Select\n</code></pre>"},{"location":"FTR/FirstEmptyField/#date-fields","title":"Date Fields","text":"<p>We can use the below to find the first field from a list of date fields that is empty and populate with a date:</p> <pre><code>'Bypass PAF rule\nIgnoreValidationErrors\n\n'Declare variables to use\nDim foundField As String\n\n'Array of date fields\nDim dateFields() As String = {\"761\", \"762\", \"763\"}\n\n'Loop through each field and find the first one that does not\n'have a date populated in it\nFor Each f As String In dateFields\n    If Not isDate(Fields(f)) Then\n        foundField = f\n        Exit For\n    End If\nNext\n\n'If no field was found alert the user, else set the field\nIf String.IsNullOrEmpty(foundField) Then\n    'Alert the user\n    MsgBox(\"There are no available field to populate a date, please manually add date.\", 48, \"Not added\")\nElse\n    'Set the found empty field with a date\n    Fields(foundField) = DateTime.Now()\nEnd If\n</code></pre>"},{"location":"FTR/FirstEmptyField/#numeric-fields","title":"Numeric Fields","text":"<p>We can use the below to find the first field from a list of numeric fields that is empty and populate it with a value:</p> <pre><code>'Bypass PAF rule\nIgnoreValidationErrors\n\n'Declare variables to use\nDim foundField As String\n\n'Array of numeric fields\nDim dateFields() As String = {\"2\", \"1109\", \"5\"}\n\n'Loop through each field and find the first one that does not\n'have a value populated in it\nFor Each f As String In dateFields\n    If Fields(f) = Nothing Then\n        foundField = f\n        Exit For\n    End If\nNext\n\n'If no field was found alert the user, else set the field\nIf String.IsNullOrEmpty(foundField) Then\n    'Alert the user\n    MsgBox(\"There are no available field to populate value, please manually add value.\", 48, \"Not added\")\nElse\n    'Set the found empty field with a value\n    Fields(foundField) = 100\nEnd If\n</code></pre> <p>Note</p> <p>Using Nothing will check to see if the field is blank or equal to 0, if 0 is a valid number that should considered as the field having a value then you may need to add additional logic to the For Each loop If statement to account for 0.</p>"},{"location":"FTR/LockUnlockFields/","title":"Lock or Unlock Fields","text":""},{"location":"FTR/LockUnlockFields/#overview","title":"Overview","text":"<p>Some fields in Encompass have a blue or gold lock icon next to them. The indicates that the field is a field that is calculated and while the lock icon is blue (unlocked) the field will be populated with the calculation. When the lock icon is gold (locked) this means that the field will no longer use the calculation and has become a manual entry field. We can control the state of a lock by using advanced code, see below to see how to lock and unlock the lock.</p>"},{"location":"FTR/LockUnlockFields/#code","title":"Code","text":"<p>With either of these methods the field you wish to control the field id must be used as a string minus the square brackets.</p>"},{"location":"FTR/LockUnlockFields/#lock-gold-icon","title":"Lock (Gold Icon)","text":"<p>To change the lock icon to gold and make a manual entry field use the following:</p> <pre><code>Fields.Lock(\"5\")\n</code></pre>"},{"location":"FTR/LockUnlockFields/#unlock-blue-icon","title":"Unlock (Blue Icon)","text":"<p>To change the lock icon to blue and change it back to using a calculation use the following:</p> <pre><code>Fields.Unlock(\"5\")\n</code></pre>"},{"location":"FTR/MessageBoxes/","title":"Message Boxes","text":""},{"location":"FTR/MessageBoxes/#overview","title":"Overview","text":"<p>The below provides information on how message boxes can be customized.</p> <p>Warning</p> <p>It has been stated many times that MsgBox in advance code will not be ported to Encompass on the web. Make sure to keep this in mind as you build your code out.</p>"},{"location":"FTR/MessageBoxes/#available-icons","title":"Available Icons","text":"<p>The below is a list of icons that are available to add to message boxes.</p> Name Icon Error/Hand/Stop Question Exclamation/Warning Asterisk/Information"},{"location":"FTR/MessageBoxes/#available-buttons","title":"Available Buttons","text":"<p>A variable can be used to combine icons and buttons to create a style that can be passed into the MsgBox call, see code below for examples. More information can be found on the MsgBox function page from Microsoft.</p> Name Enum Description vbOKOnly 0 Display OK button only. vbOKCancel 1 Display OK and Cancel buttons. vbAbortRetryIgnore 2 Display Abort, Retry, and Ignore buttons. vbYesNoCancel 3 Display Yes, No, and Cancel buttons. vbYesNo 4 Display Yes and No buttons. vbRetryCancel 5 Display Retry and Cancel buttons. vbCritical 16 Display Critical Message icon. vbQuestion 32 Display Warning Query icon. vbExclamation 48 Display Warning Message icon. vbInformation 64 Display Information Message icon."},{"location":"FTR/MessageBoxes/#example-code","title":"Example Code","text":"<pre><code>'No Icon with OK button\nMsgBox(\"No Icon\", 0, \"Title\")\n\n'Information Icon with default OK button\nMsgBox(\"Information/Asterisk\", vbInformation, \"Info Title\")\n\n'Warning Icon with default OK button\nMsgBox(\"Warning/Exclamation\", 48, \"Warning Title\")\n\n'Question Icon with default OK button\nMsgBox(\"Question\", vbQuestion, \"Question Title\")\n\n'Error Icon with default OK button\nMsgBox(\"Error/Stop/Hand\", 16, \"Error Title\")\n\n'Question Icon with Yes/No buttons\nDim btnStyle = 4 Or 32\nMsgBox(\"Question Yes or No?\", btnStyle, \"Question\")\n\n'Warning Icon with OK/Cancel buttons\nDim btnStyle2 = vbOKCancel Or vbExclamation\nMsgBox(\"Warning Ok or Cancel\", btnStyle2, \"Warning\")\n</code></pre>"},{"location":"FTR/MessageBoxes/#working-with-results","title":"Working With Results","text":"<p>We can capture what button the user clicks and then use that for additional logic in our code. Below is are the possible results:</p> <p>More information can be found on the Return values page from Microsoft.</p> Name Value Description vbOK 1 OK vbCancel 2 Cancel vbAbort 3 Abort vbRetry 4 Retry vbIgnore 5 Ignore vbYes 6 Yes vbNo 7 No"},{"location":"FTR/MessageBoxes/#code","title":"Code","text":"<pre><code>'Question Icon with Yes/No/Cancel buttons, storing results\n'in the result variable\nDim btnStyle3 = 3 Or vbQuestion\nDim result = MsgBox(\"Question Yes or No?\", btnStyle3, \"Question\")\n\n'Take action based on result\n'Answered Yes\nIf result = vbYes Then\n    Msgbox(\"Chose Yes\")\n'Answered No\nElse If result = 7 Then\n    Msgbox(\"Chose No\")\n'Answered Cancel\nElse If result = vbCancel\n    Msgbox(\"Chose Cancel\")\nEnd If\n</code></pre>"},{"location":"FTR/Milestones/","title":"Milestones","text":""},{"location":"FTR/Milestones/#overview","title":"Overview","text":"<p>The below shows how we can check to see if a Milestone has been completed, as well as showing how to complete/uncomplete a milestone using a field trigger rule. Make sure to test thoroughly when rolling milestones to make sure everything rolls as expected.</p> <p>Warning</p> <p>There are a couple of things to keep in mind when choosing to complete a milestone programmatically:</p> <ul> <li>This will finish the milestone and all milestones in between even if the user does not have permission to finish that milestone.</li> <li>The milestone completion date will be set to the date of when the rule was triggered, if milestones are skipped when finishing the milestone their completion dates will also be the trigger date.</li> <li>No users are assigned by default when a milestone is completed this way, this will leave milestone user roles unpopulated.</li> <li>Business rules such as Milestone Completion rules or Persona Access to Loan rules will not fire when a milestone is completed this way.</li> <li>The Started milestone will always be completed an cannot be uncompleted.</li> </ul>"},{"location":"FTR/Milestones/#is-milestone-completed","title":"Is Milestone Completed","text":"<p>We can use the below to check if a milestone has been completed and then do something.</p> <pre><code>'Checking to see if the Processing milestone is completed\n'the milestone name must match as it does in Encompass Settings\nIf Milestones.IsComplete(\"Milestone Name\") Then\n    'Do something based on the milestone being completed\nElse\n    'Do something based on teh milestone not being completed\nEnd If\n</code></pre>"},{"location":"FTR/Milestones/#completeuncomplete-milestones","title":"Complete/Uncomplete Milestones","text":"<p>The below shows two different ways to complete a milestone and also a way to uncomplete a milestone:</p> <pre><code>'The milestone name must match as it does in Encompass Settings\n\n'Complete the Processing Milestone\nMilestones.SetComplete(\"Milestone Name\")\n\n'Complete the Processing Milestone by passing in True\nMilestones.SetComplete(\"Milestone Name\", True)\n\n'Uncomplete the Processing Milestone by passing in False\nMilestones.SetComplete(\"Milestone Name\", False)\n</code></pre>"},{"location":"FTR/Text/","title":"Working with Text","text":""},{"location":"FTR/Text/#overview","title":"Overview","text":"<p>The below snippets help working with text, be it from validating user input or correcting case.</p>"},{"location":"FTR/Text/#change-case","title":"Change Case","text":""},{"location":"FTR/Text/#lower-case","title":"Lower Case","text":"<p>We can change the value of a string field to be all lower by calling the ToLower() method on it. This can come in handy if you are wanting to check for a specific value but the user has the ability to free type in a field.</p> <pre><code>If [CheckField].ToLower() &lt;&gt; \"some value\" Then\n    '...do something here if the value does nto match\nEnd If\n</code></pre>"},{"location":"FTR/Text/#upper-case","title":"Upper Case","text":"<p>Like Lower Case we can change teh value of a string to all upper case by calling the ToUppwer() method on it. This can be handy not only for checking for a specific value but also correcting a fields value if it the words in it must be in all upper case for any reason.</p> <pre><code>[FieldToSet] = [FieldGetValueUpperCase].ToUpper()\n</code></pre>"},{"location":"FTR/Text/#title-case","title":"Title Case","text":"<p>There are time when we need text formatted like a title, with ever letter that starts a word is capitalized. The below would correct the subject property street to 123 Main St even if the user input 123 mAiN sT for some reason:</p> <pre><code>'Create a refrence to System.Globalization namespace to get an instance to use ToTitleCase\nDim ti As System.Globalization.TextInfo = New System.Globalization.CultureInfo(\"en-US\").TextInfo\n\n'Set the field to Title Case\n[11] = ti.ToTitleCase([11])\n</code></pre>"},{"location":"FTR/Text/#substrings","title":"Substrings","text":"<p>The Substring method can be called on a string to get a portion of that string. The diagram below breaks down the structure of a loan number we are using for these examples.</p> \\[     \\overbrace{         \\underbrace{\\LARGE 111}_\\text{\\small prefix}         \\hspace{.25cm}         \\underbrace{\\LARGE 98765}_\\text{\\small auto number}     }^\\text{\\small full loan number} \\] <p>In the example below we can update the first 3 digits of the loan number to a prefix based on branch type (Net vs NonNet).</p> <pre><code>'If branch type is Net then update prefix\n'to be 222 + LOS auto number\nIf [CX.BRANCH.TYPE] = \"Net\" Then\n    'Substring is 0 based index, we start at the\n    'index 3 character to only replace the 3 digit prefix\n    [364] = \"222\" + [364].Substring(3)\n'Not a Net branch, update prefix to be\n'111 + LOS auto number\nElse\n    [364] = \"111\" + [364].Substring(3)\nEnd If\n</code></pre> <p>Substring also allows us to get only a portion of the string between two index numbers. The example below we reverse what we are doing and populate the CX.BRANCH.TYPE field to Net or NonNet based on the prefix of the loan number.</p> <pre><code>'Get the only the prefix of the loan number\n'We start at index 0 and only go to index 3\n'or the first three characters, keeping in\n'mind that the index of the last character is\n'not included\nDim prefix As String = [364].Substring(0, 3)\n\n'If prefix is 111 then NonNet branch\nIf prefix = \"111\" Then\n    [CX.BRANCH.TYPE] = \"NonNet\"\n'Else if the prefix is 222 then Net branch\nElse If prefix = \"222\" Then\n    [CX.BRANCH.TYPE] = \"Net\"\n'Else unknown branch type\nElse\n    [CX.BRANCH.TYPE] = \"Unknown\"\nEnd If\n</code></pre>"},{"location":"FTR/Math/Arithmetic/","title":"Arithmetic","text":""},{"location":"FTR/Math/Arithmetic/#overview","title":"Overview","text":"<p>Sometimes we asked to do arithmetic operations on different fields in the system. We can run into some issues when fields we are using to do this math are blank. Encompass provides a couple of ways to deal with these items.</p>"},{"location":"FTR/Math/Arithmetic/#casting","title":"Casting","text":"<p>We can use  # symbol in front of a field id to cast it to a number. For example if we had a custom string field of [#CX.CUSTOM.STRING] we could make sure that the value of field the field acts as a number in our code by adding a # like this [#CX.CUSTOM.STRING]. Keep in mind that if the value of the field is something than a numeric value then it will be cased as if it was a 0.</p>"},{"location":"FTR/Math/Arithmetic/#addition","title":"Addition","text":""},{"location":"FTR/Math/Arithmetic/#basic-addition","title":"Basic Addition","text":"<p>We can use a plus (+) between fields to add them together but we need to be carful as a field that is blank could cause an error. In the below all fields should contain a number value to properly sum the fields:</p> <pre><code>[CX.CUSTOM] = [CX.CUSTOM.DECIMAL] + [2] + [5]\n</code></pre> <p>One way we could solve for a field being blank is to cast the fields using the # symbol so that if they are blank when casted they will be represented as a 0. Our code would then look something like this:</p> <pre><code>[CX.CUSTOM] = [#CX.CUSTOM.DECIMAL] + [#2] + [#5]\n</code></pre>"},{"location":"FTR/Math/Arithmetic/#sum","title":"Sum","text":"<p>Encompass provides us some safe operators to do addition and work with fields. The Sum function tries to adds all the field values provided. If any value cannot be converted to a number then a empty value is returned. This means that all fields must have a value and that value must be able to be converted into a number. If either one of those conditions does not pass then an empty value is returned. This function can be called like this:</p> <pre><code>[CX.CUSTOM] = Sum([CX.CUSTOM.STRING], [2], [5])\n</code></pre>"},{"location":"FTR/Math/Arithmetic/#sumany","title":"SumAny","text":"<p>SumAny like is a safe operator like Sum function but when it is converting the values if the value cannot be converted to a number it is skipped instead of causing the who operation to return a blank. This means that all values provide would need to either be blank or not be able to be converted to a number for this function to return an empty value. This function can be called like this:</p> <pre><code>[CX.CUSTOM] = SumAny([CX.CUSTOM.STRING], [2], [5])\n</code></pre> <p>Note</p> <p>If my CX.CUSTOM.STRING field has a value such as \"hello\" in it, this value is skipped and only fields 2 and 5 are added together.</p>"},{"location":"FTR/Math/Arithmetic/#subtraction","title":"Subtraction","text":"<p>As of now I am not able to find any operator safe specific functions for subtraction. We of course can use the same math as we do for our basic addition where we use the minus sign (-) to subtract values from one another. Something like this would subtract fields 2 and 5 from CX.CUSTOM.DECIMAL</p> <pre><code>[CX.CUSTOM] = [#CX.CUSTOM.DECIMAL] - [#2] - [#5]\n</code></pre> <p>You could also use the Sum and SumAny functions but add the minus sing in front of the values you wish to subtract (essential making them negative number). We can rewrite the above using Sum and SumAny like this:</p> <pre><code>'Sum and return blank if a value is missing or cannot\n'be converted\n[CX.CUSTOM] = Sum([CX.CUSTOM.DECIMAL], -[2], -[5])\n\n'SumAny and return a value even if a value is missing or\n'cannot be converted\n[CX.CUSTOM] = SumAny([CX.CUSTOM.DECIMAL], -[2], -[5])\n</code></pre>"},{"location":"FTR/Math/Arithmetic/#multiplication","title":"Multiplication","text":"<p>Multiplication can be done in a similar way as we do addition. Below are a few different ways that we can multiply values.</p>"},{"location":"FTR/Math/Arithmetic/#basic-multiplication","title":"Basic Multiplication","text":"<p>We can use the same pattern as we do for basic addition where we can multiply a set of fields by simply using the asterisks sign (*). All fields used like this should have a valid numeric value to avoid getting an error:</p> <pre><code>[CX.CUSTOM] = [CX.CUSTOM.DECIMAL] * [2] * [5]\n</code></pre> <p>We can also work around this issue with casing the fields to numbers using the # symbol:</p> <pre><code>[CX.CUSTOM] = [#CX.CUSTOM.DECIMAL] * [#2] * [#5]\n</code></pre> <p>Warning</p> <p>Be careful when casting values that are blank or not numeric as they will be casted as a 0 which will cause your equation to return a 0</p>"},{"location":"FTR/Math/Arithmetic/#mult","title":"Mult","text":"<p>The Mult function is a safe operation function and works like Sum were all values passed to the function must be able to be converted to a number. If one of the values is unable to be converted the function will return a empty value. The function can be used like this:</p> <pre><code>[CX.CUSTOM] = Mult([CX.CUSTOM.STRING], [2], [5])\n</code></pre>"},{"location":"FTR/Math/Arithmetic/#multany","title":"MultAny","text":"<p>The MultAny function is also a safe operation function and works much like SumAny where it will try to convert a value to a number but if cannot or the value is blank it will be skipped. If all values cannot be converted or are blank then an empty value is returned. The function can be called like this:</p> <pre><code>[CX.CUSTOM] = MultAny([CX.CUSTOM.STRING], [2], [5])\n</code></pre>"},{"location":"FTR/Math/Arithmetic/#division","title":"Division","text":"<p>Division like Multiplication can be preformed using a basic equation or using the Div safe operation function. Below is an example of both ways.</p>"},{"location":"FTR/Math/Arithmetic/#basic-division","title":"Basic Division","text":"<p>We can simply use the forward slash sign (/) to create a division equation. Both fields in the equation should be a valid number or an error will occur:</p> <pre><code>[CX.CUSTOM] = [2] / [5]\n</code></pre> <p>We can cast our fields like we do in our other arithmetic equations but we need to be carful as if the divisor ends up being blank then an error will occur as we are trying to divide by zero which is not allowed. The same equation above can be written like this with casted fields:</p> <pre><code>[CX.CUSTOM] = [#2] / [#5]\n</code></pre>"},{"location":"FTR/Math/Arithmetic/#div","title":"Div","text":"<p>Div is a safe operation function that tries to convert both values to numeric values, if both cannot be converted then a blank value is returned. You can call this function like this:</p> <pre><code>[CX.CUSTOM] = Div([2], [5])\n</code></pre> <p>Note</p> <p>While testing this out for this post I found it best not to cast the fields used in Div as this caused some unexpected errors.</p>"},{"location":"FTR/Math/Rounding/","title":"Rounding","text":""},{"location":"FTR/Math/Rounding/#overview","title":"Overview","text":"<p>Sometimes it is requested that a number be rounded in various ways, such as to the nearest 8th or to the nearest $500. We can use the Math functions to help accomplish these asks. While we cover a few Math function here a full list can found at this Microsoft link.</p>"},{"location":"FTR/Math/Rounding/#always-round-up","title":"Always Round Up","text":"<p>We can always round a decimal number up to its nearest whole number using the Math.Ceiling function. The below would resolve to 50 as that would be the nearest whole number when rounding up:</p> <pre><code>[CX.CUSTOM] = Math.Ceiling(49.25)\n</code></pre>"},{"location":"FTR/Math/Rounding/#always-round-down","title":"Always Round Down","text":"<p>We can also always round a decimal number down to the nearest whole using the Math.Floor function. The below would resolve to 49 as that is teh nearest whole number when rounding down:</p> <pre><code>[CX.CUSTOM] = Math.Floor(49.25)\n</code></pre>"},{"location":"FTR/Math/Rounding/#round-to-nearest-fraction","title":"Round to nearest fraction","text":"<p>We can round to the nearest fraction (eighth, half, quarter) by using a combination of Math functions. The below demonstrates how we can round to the nearest 1/8th but you can change the roundTo variable to be what ever fraction you need.</p>"},{"location":"FTR/Math/Rounding/#round-up-to-nearest-18th","title":"Round up to nearest 1/8th","text":"<pre><code>'Bypass PAF rule\nIgnoreValidationErrors\n\n'Create a variable to capture the decimal to round\nDim fieldValue As Decimal = [CX.CUSTOM]\n\n'Create a varabile of what we should round to\nDim roundTo As Decimal = 0.125\n\n'Round up to the nearest value of our roundTo variable\n[CX.TARGET] = Math.Ceiling(fieldValue/ roundTo) * roundTo\n</code></pre>"},{"location":"FTR/Math/Rounding/#round-down-to-the-nearest-18th","title":"Round down to the nearest 1/8th","text":"<pre><code>'Bypass PAF rule\nIgnoreValidationErrors\n\n'Create a variable to capture the decimal to round\nDim fieldValue As Decimal = [CX.CUSTOM]\n\n'Create a varabile of what we should round to\nDim roundTo As Decimal = 0.125\n\n'Round down to the nearest value of our roundTo variable\n[CX.TARGET] = Math.Floor(fieldValue/ roundTo) * roundTo\n</code></pre>"},{"location":"FTR/Math/Rounding/#round-to-nearest-value","title":"Round to nearest value","text":"<p>There are times where we need to round an amount to the nearest amount (500, 100, 1000) of a number. This could be accomplished by using the Math Ceiling (round up) or Floor (round down) to get to the nearest value.</p>"},{"location":"FTR/Math/Rounding/#round-up-to-nearest-500","title":"Round up to nearest 500","text":"<pre><code>'Bypass PAF rule\nIgnoreValidationErrors\n\n'Create a variable to capture the value to round\nDim fieldValue = [2]\n\n'Create a varabile of what we should round to\nDim roundTo As Integer = 500\n\n'Round down to the nearest value of our roundTo variable\n[CX.CUSTOM] = Math.Ceiling(fieldvalue / roundTo) * roundTo\n</code></pre>"},{"location":"FTR/Math/Rounding/#round-down-to-nearest-500","title":"Round down to nearest 500","text":"<pre><code>'Bypass PAF rule\nIgnoreValidationErrors\n\n'Create a variable to capture the value to round\nDim fieldValue = [2]\n\n'Create a varabile of what we should round to\nDim roundTo As Integer = 500\n\n'Round down to the nearest value of our roundTo variable\n[CX.CUSTOM] = Math.Floor(fieldvalue / roundTo) * roundTo\n</code></pre>"},{"location":"IFB/","title":"Input Form Builder","text":""},{"location":"IFB/#overview","title":"Overview","text":"<p>Code found in this section can be used in the Input Form Builder (Encompass Desktop). Each section will try to introduce a snippet of code and then explain how it can be used. While code can be copied from this site it should be updated to reflect your need.</p> <p>Important</p> <p>As with any code copied make sure to update and understand what it is doing before deploying to a production environment.</p>"},{"location":"IFB/AddConversation/","title":"Add Conversation Log Entry","text":""},{"location":"IFB/AddConversation/#overview","title":"Overview","text":"<p>We can add to a loan's conversation log programmatically using the Conversation class. This can be helpful when we want to log that we have done something, example of this is used in the Send Email code to record that an email had been sent to a borrower.</p>"},{"location":"IFB/AddConversation/#conversation-class-properties","title":"Conversation Class Properties","text":"<p>Listed below are a condensed list of properties for a Conversation object. More can be found in the EncompassObjects Help file.</p> Property Description Company Name of the company list in the conversation entry ContactMethod Method of contact used, either Phone or Email Date Date of the conversation DisplayInLog Indicates that the conversation should be displayed in the Log pane EmailAddress Email address of which the conversation was sent HeldWith Person whom the conversation was held with NewComments New comments for conversation since loan was last saved PhoneNumber Phone number used in the conversation"},{"location":"IFB/AddConversation/#add-conversation","title":"Add Conversation","text":"VBC# <pre><code>'Declare an Conversation object to use with a date of Now\nDim conv As Conversation = loan.log.conversations.add(DateTime.Now)\n\n'Set properties based on conversation had\nconv.HeldWith = \"Borrower Name\"\nconv.NewComments = \"Called borrower to discuss items\"\nconv.ContactMethod = ConversationContactMethod.Phone\nconv.PhoneNumber = \"555-867-5309\"\nconv.DisplayInLog = True\n</code></pre> <pre><code>//Declare an Conversation object to use with a date of Now\nConversation conv = Loan.Log.Conversations.Add(DateTime.Now);\n\n//Set properties based on conversation had\nconv.HeldWith = \"Appraiser\";\nconv.NewComments = \"Document was sent to: email@example.com\";\nconv.Company = \"ACME\";\nconv.ContactMethod = ConversationContactMethod.Email;\nconv.EmailAddress = \"email@example.com\";\nconv.DisplayInLog = true;\n</code></pre>"},{"location":"IFB/ApplyTemplates/","title":"Apply Templates","text":""},{"location":"IFB/ApplyTemplates/#overview","title":"Overview","text":"<p>We can apply a template to a loan by using the Loan.ApplyTemplate() method. Below we will walk through applying the following templates:</p> <ul> <li>Loan Program</li> <li>Closing Cost</li> <li>Doc Set</li> <li>Input Form Set</li> <li>Data Template</li> </ul> <p>Note</p> <p>The ApplyTemplate() method takes two arguments. The first argument is the template that we are applying. The second argument is a boolean that if set to true when the template is applied all non-empty fields from the template will be populates. If set to false all fields, include the blank fields in the template, will be applied to the loan.</p>"},{"location":"IFB/ApplyTemplates/#loan-program","title":"Loan Program","text":"VBC# <pre><code>'Get template to be applied\nDim template = Loan.Session.Loans.Templates.GetTemplate(TemplateType.LoanProgram, \"Public:\\\\Companywide\\\\Conventional - 30 Year\")\n\n'Apply the template\nLoan.ApplyTemplate(template, false)\n</code></pre> <pre><code>//Get template to be applied\nLoanProgram template = (LoanProgram)Loan.Session.Loans.Templates.GetTemplate(TemplateType.LoanProgram, @\"Public:\\Companywide\\Conventional - 30 Year\");\n\n//Apply the template\nLoan.ApplyTemplate(template, false);\n</code></pre>"},{"location":"IFB/ApplyTemplates/#closing-cost","title":"Closing Cost","text":"VBC# <pre><code>'Get template to be applied\nDim template = Loan.Session.Loans.Templates.GetTemplate(TemplateType.ClosingCost, \"Public:\\\\Companywide\\\\Conventional\")\n\n'Apply the template\nLoan.ApplyTemplate(template, true)\n</code></pre> <pre><code>//Get template to be applied\nClosingCost template = (ClosingCost)Loan.Session.Loans.Templates.GetTemplate(TemplateType.ClosingCost, @\"Public:\\Companywide\\Conventional\");\n\n//Apply the template\nLoan.ApplyTemplate(template, true);\n</code></pre>"},{"location":"IFB/ApplyTemplates/#doc-set","title":"Doc Set","text":"VBC# <pre><code>'Get template to be applied\nDim template = Loan.Session.Loans.Templates.GetTemplate(TemplateType.DocumentSet, \"Public:\\\\Companywide\\\\Conventional Documents\")\n\n'Apply the template\nLoan.ApplyTemplate(template, false)\n</code></pre> <pre><code>//Get template to be applied\nDocumentSet template = (DocumentSet)Loan.Session.Loans.Templates.GetTemplate(TemplateType.DocumentSet, @\"Public:\\\\Companywide\\\\Conventional Documents\");\n\n//Apply the template\nLoan.ApplyTemplate(template, true);\n</code></pre>"},{"location":"IFB/ApplyTemplates/#input-form-set","title":"Input Form Set","text":"VBC# <pre><code>'Get template to be applied\nDim template = Loan.Session.Loans.Templates.GetTemplate(TemplateType.InputFormSet, \"Public:\\\\Companywide\\\\Conventional Forms\")\n\n'Apply the template\nLoan.ApplyTemplate(template, false)\n\n'Mark Show All and then Unmark it to refresh Form list\nMacro.SendKeys(\"%o\")\nMacro.SendKeys(\"%o\")\n</code></pre> <pre><code>//Get template to be applied\nInputFormSet template = (InputFormSet)Loan.Session.Loans.Templates.GetTemplate(TemplateType.InputFormSet, @\"Public:\\\\Companywide\\\\Conventional Forms\");\n\n//Apply the template\nLoan.ApplyTemplate(template, true);\n\n//Mark Show All and then Unmark it to refresh Form list\nMacro.SendKeys(\"%o\");\nMacro.SendKeys(\"%o\");\n</code></pre>"},{"location":"IFB/ApplyTemplates/#data-template","title":"Data Template","text":"VBC# <pre><code>'Get template to be applied\nDim template = Loan.Session.Loans.Templates.GetTemplate(TemplateType.DataTemplate, \"Public:\\\\Companywide\\\\Master - Conventional - Purchase\")\n\n'Apply the template\nLoan.ApplyTemplate(template, true)\n</code></pre> <pre><code>//Get template to be applied\nDataTemplate template = (DataTemplate)Loan.Session.Loans.Templates.GetTemplate(TemplateType.DataTemplate, @\"Public:\\\\Companywide\\\\Master - USDA\");\n\n//Apply the template\nLoan.ApplyTemplate(template, true);\n</code></pre>"},{"location":"IFB/BorrowerPairs/","title":"Borrower Pairs","text":""},{"location":"IFB/BorrowerPairs/#overview","title":"Overview","text":"<p>We can loop over the borrower pairs in a loan object and get or set a field value for that specific pair using the BoarrowerPairs object.</p>"},{"location":"IFB/BorrowerPairs/#get-field-value","title":"Get Field Value","text":"<p>The below will get the borrowers name from a borrower pair that is not the currently selected borrower pair.</p> VBC# <pre><code>'First we check to see if there are more than\n'one borrower pair\nIf Loan.BorrowerPairs.Count &gt; 1 Then\n    'Loop through each pair\n    For Each pair as BorrowerPair in Loan.BorrowerPairs\n        'For each pair that isn't the current selected pair\n        'Get the borrowers first name\n        If pair &lt;&gt; Loan.BorrowerPairs.Current Then\n            Msgbox(loan.Fields(\"4000\").GetValueForBorrowerPair(pair))\n        End If\n    Next\nEnd If\n</code></pre> <pre><code>//First we check to see if there are more than\n//one borrower pair\nif (Loan.BorrowerPairs.Count &gt; 1)\n{\n    //Loop through each pair\n    foreach (BorrowerPair pair in Loan.BorrowerPairs)\n    {\n        //For each pair that isn't the current selected pair\n        //Get the borrowers first name\n        if (pair != Loan.BorrowerPairs.Current)\n        {\n            System.Windows.Forms.MessageBox.Show(Loan.Fields[\"4000\"].GetValueForBorrowerPair(pair), \"Borrower Name\");\n        }\n    }\n}\n</code></pre>"},{"location":"IFB/BorrowerPairs/#set-field-value","title":"Set Field Value","text":"<p>We can also set a pair specific field. Below shows how we can change the last name for a borrower that is not the current pair.</p> VBC# <pre><code>'First we check to see if there are more than\n'one borrower pair\nIf Loan.BorrowerPairs.Count &gt; 1 Then\n    'Loop through each pair\n    For Each pair as BorrowerPair in Loan.BorrowerPairs\n        'For each pair that isn't the current selected pair\n        'Get the borrowers first name\n        If pair &lt;&gt; Loan.BorrowerPairs.Current Then\n            Loan.Fields(\"4002\").SetValueForBorrowerPair(pair, \"LastName\")\n        End If\n    Next\nEnd If\n\n'Refresh BorrowerPairs after changes\nLoan.BorrowerPairs.Refresh()\n</code></pre> <pre><code>//First we check to see if there are more than\n//one borrower pair\nif (Loan.BorrowerPairs.Count &gt; 1)\n{\n    //Loop through each pair\n    foreach (BorrowerPair pair in Loan.BorrowerPairs)\n    {\n        //For each pair that isn't the current selected pair\n        //Get the borrowers first name\n        if (pair != Loan.BorrowerPairs.Current)\n        {\n            Loan.Fields[\"4002\"].SetValueForBorrowerPair(pair, \"LastName\");\n        }\n    }\n}\n\n//Refresh BorrowerPairs after changes\nLoan.BorrowerPairs.Refresh();\n</code></pre>"},{"location":"IFB/CreateFunctions/","title":"Functions in Forms","text":""},{"location":"IFB/CreateFunctions/#overview","title":"Overview","text":"<p>We can create functions in the load event of Form1 (default form for IFB), by double clicking on a blank area outside of any controls. Functions allow us to reuse code across multiple places on our form. An example of this can be found in the Log Field page.</p>"},{"location":"IFB/CreateFunctions/#creating-functions","title":"Creating Functions","text":"<p>The below code should be added to the load event of Form1 below all other load code that you wish to preform on the form. No code should be added after this code.</p> VBC# <pre><code>'End of load event\nEnd Sub\n\n'Provide a function name along with any paramaters\nPublic Function MyMethod(myStr as string) As string\n    'can use built in Macros\n    Macro.Alert(myStr)\n    'Can return values\n    return \"From method\"\nEnd Function\n\n'We can also create utility methods\nPublic Function ErrorBox(message as string)\n    'Create re-usable error box\n    Msgbox(message, 16, \"Error\")\nEnd Function\n\n'Declare new sub to match with original load subs End Sub\nPublic Sub DummySub()\n</code></pre> <p>Warning</p> <p>This is something that I just discovered as I was working through the Log Field code. As such I have gotten a chance to use functions on C Sharp forms as much as I have on VB forms. As with any code make sure you test and understand before moving to a production environment.</p> <pre><code>    //End of load event\n    }\n\n    //New class that holds custom methods to be used\n    private class CustomMethods\n    {\n\n        //Provide a function name along with any parameters\n        public static string MyMethod(string myStr)\n        {\n            //Can use built in Macros\n            Macro.Alert(myStr);\n            //Can return values\n            return \"From method\";\n        }\n\n        //We can also create utility methods\n        public static void MsgBox(string message)\n        {\n            //Message Box for testing\n            System.Windows.Forms.MessageBox.Show(message, \"Title\", 0, System.Windows.Forms.MessageBoxIcon.Information);\n        }\n\n    //Do not add a } for new class as ther is an already one\n    //from the original load event\n</code></pre>"},{"location":"IFB/CreateFunctions/#calling","title":"Calling","text":"<p>The below shows how we can call each of our custom functions from other controls. In this case I used a button click event but other events can be used.</p> VBC# <pre><code>'Call the MyMethod function and then store the returned value\nDim returned = MyMethod(\"Hello\")\n'Display the returned value from MyMethod\nMsgbox(returned)\n'Use the ErrorBox utility method\nErrorBox(\"Something went wrong\")\n</code></pre> <p>Warning</p> <p>This is something that I just discovered as I was working through the Log Field code. As such I have gotten a chance to use functions on C Sharp forms as much as I have on VB forms. As with any code make sure you test and understand before moving to a production environment.</p> <pre><code>//Call the MyMethod fuction through the class we created\n//storing the returned value\nstring returned = CustomMethods.MyMethod(\"Hello\");\n//using our utility method to display the returned value\nCustomMethods.MsgBox(returned); \n</code></pre>"},{"location":"IFB/CurrentUser/","title":"Current User","text":""},{"location":"IFB/CurrentUser/#overview","title":"Overview","text":"<p>The below provides a way to get a User object of the current user that is logged into Encompass. This can be handy when trying to determine if the user viewing the form has a particular group or persona, which then can be used in logic on the form.</p>"},{"location":"IFB/CurrentUser/#getting-the-current-user","title":"Getting the Current User","text":"VBC# <pre><code>Dim currUser as User = Loan.Session.GetCurrentUser()\n</code></pre> <pre><code>User currUser = Loan.Session.GetCurrentUser();\n</code></pre>"},{"location":"IFB/CurrentUser/#code-snippets","title":"Code Snippets","text":""},{"location":"IFB/CurrentUser/#specific-user-from-list","title":"Specific User from list","text":"<p>The below block checks a list of users and if the current user matches one of the users in the list then it does something. This can be handy if you want a small amount of specific users to have access to certain controls on the page.</p> VBC# <pre><code>'Get the current User\nDim currUser as User = Loan.Session.GetCurrentUser()\n'Array of specific User IDs\nDim arrUsers() as String = {\"userID1\", \"userID2\", \"userID3\"}\n\n'Loop through arrUsers and if it matches the current user do something\nFor Each arrUser as String in arrUsers\n    If arrUser = currUser.ID Then\n        '....do something here\n        Exit For\n    End If\nNext\n</code></pre> <pre><code>//Get the current User\nUser currUser = Loan.Session.GetCurrentUser();\n//Array of specific User IDs\nstring[] arrUsers = {\"jsims\", \"userID2\", \"userID3\"};\n\n//Loop through arrUsers and if it matches the current user do something\nforeach (string arrUser in arrUsers)\n{\n    if (arrUser == currUser.ID)\n    {\n        //....do something here\n        break;\n    }\n}\n</code></pre>"},{"location":"IFB/CurrentUser/#user-has-persona","title":"User has Persona","text":"<p>The below code blocks show different ways to check if a user has a certain persona.</p> <p>The block below can be handy if you want have a set of controls that only a user with a specific persona should access, such as an admin panel or a log on the form.</p> VBC# <pre><code>'Get the current User\nDim currUser as User = Loan.Session.GetCurrentUser()\n'Get the Persona to check for\nDim aPersona as Persona = Loan.Session.Users.Personas.GetPersonaByName(\"Super Administrator\")\n\n'If the current user has the specific persona then do something\nIf currUser.Personas.Contains(aPersona) Then\n    '....do something here\nEnd If\n</code></pre> <pre><code>//Get the current User\nUser currUser = Loan.Session.GetCurrentUser();\n//Get the Persona to check for\nPersona aPersona = Loan.Session.Users.Personas.GetPersonaByName(\"Super Administrator\");\n\nif (currUser.Personas.Contains(aPersona))\n{\n    Macro.Alert(\"Hello\");\n}\n</code></pre> <p>This block shows if you want multiple personas to have access to a specific controls. Example of this would be that you want users with the Underwriting persona and users with the Closer persona to have access to a information panel on a form but other users do not need access to it.</p> VBC# <pre><code>'Get the current User\nDim currUser as User = Loan.Session.GetCurrentUser()\n'Create an array of Persona names\nDim arrPersonas() as string = {\"Super Administrator\", \"Administrator\"}\n\n'Loop through the Persona array\nFor Each arrPersona as String in arrPersonas\n    'Get the Persona object by name\n    Dim aPersona as Persona = Loan.Session.Users.Personas.GetPersonaByName(arrPersona)\n\n    'Check if current user has persona and do something\n    If currUser.Personas.Contains(aPersona) Then\n        '....do something here\n        Exit For\n    End If\nNext\n</code></pre> <pre><code>//Get the current User\nUser currUser = Loan.Session.GetCurrentUser();\n//Create an array of Persona names\nstring[] arrPersonas = {\"Super Administrator\", \"Administrator\"};\n\n//Loop through the Persona array\nforeach (string arrPersona in arrPersonas)\n{\n    //Get the Persona object by name\n    Persona aPersona = Loan.Session.Users.Personas.GetPersonaByName(arrPersona);\n\n    //Check if current user has persona and do something\n    if (currUser.Personas.Contains(aPersona))\n    {\n        //....do something here\n    }\n}\n</code></pre>"},{"location":"IFB/CurrentUser/#user-is-in-user-group","title":"User is in User Group","text":"<p>The block below checks if the current user is part of a specific User Group. This can helpful if you want to give access to user that may not have a common persona access controls on the form.</p> VBC# <pre><code>'Get the current User\nDim currUser as User = Loan.Session.GetCurrentUser()\n'Get list of Users from User Group\nDim uList as UserList = Loan.Session.Users.Groups.GetGroupByName(\"Group Name\").GetUsers()\n\n'Check to see if current user is in user list from User Group\nIf uList.Contains(currUser) Then\n    '....do something here\nEnd If\n</code></pre> <pre><code>//Get the current User\nUser currUser = Loan.Session.GetCurrentUser();\n//Get list of Users from User Group\nUserList uList = Loan.Session.Users.Groups.GetGroupByName(\"PowerBI\").GetUsers();\n\n//Check to see if current user is in user list from User Group\nif (uList.Contains(currUser))\n{\n    Macro.Alert(\"Group has user\");\n}\n</code></pre>"},{"location":"IFB/DateComparison/","title":"Date Comparison","text":""},{"location":"IFB/DateComparison/#overview","title":"Overview","text":"<p>The below code blocks help find the minimum or maximum date.</p>"},{"location":"IFB/DateComparison/#efolder-document-placeholder","title":"eFolder Document placeholder","text":""},{"location":"IFB/DateComparison/#minimum-date","title":"Minimum Date","text":"VBC# <pre><code>'Variable to hold the eFolder Document placeholder name to check\nDim docName as String = \"eFolder Document Name\"\n\n'Variable to hold attachment with the minimum date\nDim foundAtt as Attachment\n\n'Create a date to compare to attachment dates\nDim minDate as DateTime = new DateTime(3000, 1, 1)\n\n'Loop through the eFolder for the document and grab the oldest attachment\nFor Each doc as TrackedDocument in Loan.Log.TrackedDocuments.GetDocumentsByTitle(docName)\n    'Loop through each attachment and get attachment with the oldest date time and that is active\n    For Each att as Attachment in doc.GetAttachments\n        If att.Date &lt; minDate And att.IsActive then\n            minDate = att.Date\n            foundAtt = att\n        End If\n    Next\nNext\n\n'If there was no attachment found do something\nIf foundAtt is Nothing then\n    '...no attachment\n'If there is an attachment then do something\nElse\n    '...attachment found\nEnd If\n</code></pre> <pre><code>//Variable to hold the eFolder Document placeholder name to check\nstring docName = \"eFolder Document Name\";\n\n//Variable to hold attachment with the minimum date\nAttachment foundAtt = null;\n\n//Create a date to compare to attachment dates\nDateTime minDate = new DateTime(3000, 1, 1);\n\n//Loop through the eFolder for the document and grab the oldest attachment\nforeach (TrackedDocument doc in Loan.Log.TrackedDocuments.GetDocumentsByTitle(docName))\n{\n    //Loop through each attachment and get attachment with the oldest date time and that is active\n    foreach (Attachment att in doc.GetAttachments())\n    {\n        if (att.Date &lt; minDate &amp;&amp; att.IsActive)\n        {\n            minDate = att.Date;\n            foundAtt = att;\n        }\n    }\n}\n\n//If there was no attachment found do something\nif (foundAtt == null)\n{\n    //...no attachment\n}\n//If there is an attachment then do something\nelse\n{\n    //...attachment found\n}\n</code></pre>"},{"location":"IFB/DateComparison/#maximum-date","title":"Maximum Date","text":"VBC# <pre><code>'Variable to hold the eFolder Document placeholder name to check\nDim docName as String = \"eFolder Document Name\"\n\n'Variable to hold attachment with the maximum date\nDim foundAtt as Attachment\n\n'Create a date to compare to attachment dates\nDim maxDate as DateTime = new DateTime(1990, 1, 1)\n\n'Loop through the eFolder for the document and grab the most recent attachment\nFor Each doc as TrackedDocument in Loan.Log.TrackedDocuments.GetDocumentsByTitle(docName)\n    'Loop through each attachment and get attachment with the newest date time and that is active\n    For Each att as Attachment in doc.GetAttachments\n        If att.Date &gt; maxDate And att.IsActive then\n            maxDate = att.Date\n            foundAtt = att\n        End If\n    Next\nNext\n\n'If there was no attachment found do something\nIf foundAtt is Nothing then\n    '...no attachment\n'If there is an attachment then do something\nElse\n    '...attachment found\nEnd If\n</code></pre> <pre><code>//Variable to hold the eFolder Document placeholder name to check\nstring docName = \"eFolder Document Name\";\n\n//Variable to hold attachment with the maximum date\nAttachment foundAtt = null;\n\n//Create a date to compare to attachment dates\nDateTime maxDate = new DateTime(1990, 1, 1);\n\n//Loop through the eFolder for the document and grab the most recent attachment\nforeach (TrackedDocument doc in Loan.Log.TrackedDocuments.GetDocumentsByTitle(docName))\n{\n    //Loop through each attachment and get attachment with the newest date time and that is active\n    foreach (Attachment att in doc.GetAttachments())\n    {\n        if (att.Date &gt; maxDate &amp;&amp; att.IsActive)\n        {\n            maxDate = att.Date;\n            foundAtt = att;\n        }\n    }\n}\n\n//If there was no attachment found do something\nif (foundAtt == null)\n{\n    //...no attachment\n}\n//If there is an attachment then do something\nelse\n{\n    //...attachment found\n}\n</code></pre>"},{"location":"IFB/DateComparison/#loan-fields","title":"Loan Fields","text":""},{"location":"IFB/DateComparison/#minimum-date_1","title":"Minimum Date","text":"VBC# <pre><code>'Create array of string of field ids\nDim fields() as string = {\"761\", \"2301\", \"2987\"}\n\n'Create a date to compare to\nDim minDate as DateTime = new DateTime(3000, 1, 1)\n\n'Loop through the fields and find the minimum date\nFor Each field as string in fields\n    'Get the formatted value of the field\n    Dim fValue as string = Loan.Fields(field).FormattedValue\n\n    'Check to see if is empty date or value\n    If fValue &lt;&gt; \"//\" And fValue &lt;&gt; Nothing Then\n        'Compare field date to current minDate, if smaller update min date\n        If Loan.Fields(field).ToDate() &lt; minDate Then\n            minDate = Loan.Fields(field).ToDate()\n        End If\n    End If\nNext\n\n'If minDate doesn't equal its original value then found new min date\nIf minDate &lt;&gt; new DateTime(3000, 1, 1) Then\n    'min date found\n'Else minDate is the same as it oringal value and no new min date was found\nElse\n    'no min date found\nEnd If\n</code></pre> <pre><code>//Create array of string of field ids\nstring[] fields = {\"761\", \"2301\", \"2987\"};\n\n//Create a date to compare to\nDateTime minDate = new DateTime(3000, 1, 1);\n\n//Loop through the fields and find the minimum date\nforeach (string field in fields)\n{\n    //Get the formatted value of the field\n    string fValue = Loan.Fields[field].FormattedValue;\n\n    //Check to see if is not a empty date or value\n    if (fValue != \"//\" &amp;&amp; fValue != null)\n    {\n        //Compare field date to current minDate, if less update min date\n        if (Loan.Fields[field].ToDate() &lt; minDate)\n        {\n            minDate = Loan.Fields[field].ToDate();\n        }\n    }\n}\n\n//If minDate doesn't equal its original value then new min date found\nif (minDate != new DateTime(3000, 1, 1))\n{\n    //min date found\n}\n//Else minDate is the same as it original value and no new min date was found\nelse\n{\n    //no min date found\n}\n</code></pre>"},{"location":"IFB/DateComparison/#maximum-date_1","title":"Maximum Date","text":"VBC# <pre><code>'Create array of string of field ids\nDim fields() as string = {\"761\", \"2301\", \"2987\"}\n\n'Create a date to compare to\nDim maxDate as DateTime = new DateTime(1990, 1, 1)\n\n'Loop through the fields and find the maximum date\nFor Each field as string in fields\n    'Get the formatted value of the field\n    Dim fValue as string = Macro.GetField(field)\n\n    'Check to see if is empty date or value\n    If fValue &lt;&gt; \"//\" And fValue &lt;&gt; Nothing Then\n        'Compare field date to current minDate, if greater update max date\n        If Loan.Fields(field).ToDate() &gt; maxDate Then\n            maxDate = Loan.Fields(field).ToDate()\n        End If\n    End If\nNext\n\n'If maxDate doesn't equal its original value then found new max date\nIf maxDate &lt;&gt; new DateTime(1990, 1, 1) Then\n    '...max date found\n'Else maxDate is the same as it original value and no new max date was found\nElse\n    '...no max date found\nEnd If\n</code></pre> <pre><code>//Create array of string of field ids\nstring[] fields = {\"761\", \"2301\", \"2987\"};\n\n//Create a date to compare to\nDateTime maxDate = new DateTime(1990, 1, 1);\n\n//Loop through the fields and find the maximum date\nforeach (string field in fields)\n{\n    //Get the formatted value of the field\n    string fValue = Macro.GetField(field);\n\n    //Check to see if is not a empty date or value\n    if (fValue != \"//\" &amp;&amp; fValue != null)\n    {\n        //Compare field date to current maxDate, if greater update max date\n        if (Loan.Fields[field].ToDate() &gt; maxDate)\n        {\n            maxDate = Loan.Fields[field].ToDate();\n        }\n    }\n}\n\n//If maxDate doesn't equal its original value then new max date found\nif (maxDate != new DateTime(1990, 1, 1))\n{\n    //...max date found\n}\n//Else maxDate is the same as it original value and no new max date was found\nelse\n{\n    //...no max date found\n}\n</code></pre>"},{"location":"IFB/DropDown/","title":"Working with the Dropdown control","text":""},{"location":"IFB/DropDown/#overview","title":"Overview","text":"<p>A Dropdown Box control can be a helpful control for when users need choose a single selection but there are multiple options to choose from. The below demonstrates how to programmatically change the options of a dropdown box control.</p> <p>Note</p> <p>While you can create a custom field in Encompass with the Dropdown type, this may restrict you ability to use some of the code below. If you are having issues try backing the dropdown control with a string type custom field and see if that helps resolve.</p> <p>A Dropdown Box Options properties is a DropdownOptionsCollection which is a list of DropdownOption that is used by the control to know what choices to provide the end user. A DropdownOption is composed of a minimum of a Text property or a Text and Value properties. The Text property will always be what the end user sees as an option in the dropdown box. While the Value properties is the actual value that is saved to a field when a item is selected from a dropdown box. The Text and Value properties can be the same or they can be different.</p> <p>An example of how it can be helpful to have the Text and Value different are when you are needing to have a user select an item but the value needs to map to something. Lets say we have a dropdown box that has possible items of Fannie Mae 10/5 or Freddie Mac 10/7 but on a report we need to represent this as FNMA105 or FHLMC107. In this case we can set the Text properties to read Fannie Mae 10/5 and Freddie Mac 10/7 but when a user selects one the actual value will be FNMA105 or FHLMC107 respectively. This is easier for the user to understand why they are selecting and also populates the report with the required data.</p>"},{"location":"IFB/DropDown/#adding-options","title":"Adding Options","text":"<p>There are multiped ways to add options to a Dropdown Box, below are ways to add options either directly or by creating a list of DropdownOptions first.</p>"},{"location":"IFB/DropDown/#adding-directly","title":"Adding Directly","text":"<p>This can be handy if there are not many options to add or if you need to add options in a particular order. We also look at adding options with only a Text property expressed or with both Text and Value properties expressed.</p> Text OnlyText and Value VBC# <pre><code>'Populate Dropdown Box with control ID dbxTest with\n'a set of options, the Text and Value will be the same\n\n'Adding a blank option as the first option\ndbxTest.Options.Add(\"\")\n\n'Adding additional options \ndbxTest.Options.Add(\"Loan Officer\")\ndbxTest.Options.Add(\"Loan Assistant\")\ndbxTest.Options.Add(\"Loan Processor\")\n\n'Bind to previous selected value if any based\n'on field that backs the dropdonw box\ndbxTest.BindTo(Macro.GetField(dbxTest.Field.FieldID))\n</code></pre> <pre><code>//Populate Dropdown Box with control ID dbxTest with\n//a set of options, the Text and Value will be the same\n\n//Adding a blank option as the first option\ndbxTest.Options.Add(\"\");\n\n//Adding additional options \ndbxTest.Options.Add(\"Loan Officer\");\ndbxTest.Options.Add(\"Loan Assistant\");\ndbxTest.Options.Add(\"Loan Processor\");\n\n//Bind to previous selected value if any based\n//on field that backs the dropdonw box\ndbxTest.BindTo(Macro.GetField(dbxTest.Field.FieldID));\n</code></pre> VBC# <pre><code>'Populate Dropdown Box with control ID dbxTest with\n'a set of options, the Text and Value are different\n\n'Adding a blank option as the first option\ndbxTest.Options.Add(\"\", \"\")\n\n'Adding additional options \ndbxTest.Options.Add(\"Loan Officer\", \"LO\")\ndbxTest.Options.Add(\"Loan Assistant\", \"LA\")\ndbxTest.Options.Add(\"Loan Processor\", \"LP\")\n\n'Bind to previous selected value if any based\n'on field that backs the dropdonw box\ndbxTest.BindTo(Macro.GetField(dbxTest.Field.FieldID))\n</code></pre> <pre><code>//Populate Dropdown Box with control ID dbxTest with\n//a set of options, the Text and Value are different\n\n//Adding a blank option as the first option\ndbxTest.Options.Add(\"\", \"\");\n\n//Adding additional options \ndbxTest.Options.Add(\"Loan Officer\", \"LO\");\ndbxTest.Options.Add(\"Loan Assistant\", \"LA\");\ndbxTest.Options.Add(\"Loan Processor\", \"LP\");\n\n//Bind to previous selected value if any based\n//on field that backs the dropdonw box\ndbxTest.BindTo(Macro.GetField(dbxTest.Field.FieldID));\n</code></pre> <p>Note</p> <p>It may be worth calling the Clear method on the dropdown options before populating, if you have multiple events that could add options, otherwise you may end up with a list of options that looks odd. Using the example dropdown box from above, to clear the options you would write dbxTest.Options.Clear()</p>"},{"location":"IFB/DropDown/#adding-using-a-list","title":"Adding using a List","text":"<p>A list of DropdownOption can be used to populate a Dropdown Box, this can be handy when you are needing to pull options from multiple sources or possibly sort the list before populating the options for the user. The below examples first get the list of Roles from Encompass and then sorts them in alphabetical order based on name.</p> Text OnlyText and Value VBC# <pre><code>'Get Roles\nDim roles as Roles = loan.Session.Loans.Roles()\n'Create list to hold drop down options\nDim dbOptions as New System.Collections.Generic.List(Of DropdownOption)()\n\n'Populate drop down options with Role Name to be displayed\n'and as the value\nFor Each role as Role in roles\n    dbOptions.Add(New DropdownOption(role.Name))\nNext\n\n'We can use this to sort the Roles by name\n'instead of what order they were added to the list\ndbOptions.Sort(Function(x as DropdownOption, y as DropdownOption) x.Text.CompareTo(y.Text))\n\n'Add blank option as first option\ndbOptions.Insert(0, New DropdownOption(\"\"))\n\n'Populate dropdown\ndbxTest.Options.AddRange(dbOptions)\n\n'Select previous value based on bound field.\ndbxTest.BindTo(Macro.GetField(dbxTest.Field.FieldID))\n</code></pre> <pre><code>//Get Roles\nRoles roles = Loan.Session.Loans.Roles;\n//Create list to hold drop down options\nSystem.Collections.Generic.List&lt;DropdownOption&gt; dbOptions = new System.Collections.Generic.List&lt;DropdownOption&gt;();\n\n//Populate drop down options with Role Name to be displayed\n//and as the value\nforeach (Role role in roles)\n{\n    dbOptions.Add(new DropdownOption(role.Name));\n}\n\n//We can use this to sort the Roles by name\n//instead of what order they were added to the list\ndbOptions.Sort((DropdownOption x, DropdownOption y) =&gt; x.Text.CompareTo(y.Text));\n\n//Add blank option as first option\ndbOptions.Insert(0, new DropdownOption(\"\"));\n\n//Populate dropdown\ndbxTest.Options.AddRange(dbOptions);\n\n//Select previous value based on bound field.\ndbxTest.BindTo(Macro.GetField(dbxTest.Field.FieldID));\n</code></pre> VBC# <pre><code>'Get Roles\nDim roles as Roles = loan.Session.Loans.Roles()\n'Create list to hold dropdown options\nDim dbOptions as New System.Collections.Generic.List(Of DropdownOption)()\n\n'Populate dropdown options with Role Name to be displayed\n'and role abbreviation as the value\nFor Each role as Role in roles\n    dbOptions.Add(New DropdownOption(role.Name, role.Abbreviation))\nNext\n\n'We can use this to sort the Roles by the name\n'instead of what order they were added to the list\ndbOptions.Sort(Function(x as DropdownOption, y as DropdownOption) x.Text.CompareTo(y.Text))\n\n'Add blank option as first option\ndbOptions.Insert(0, New DropdownOption(\"\"))\n\n'Populate dropdown\ndbxTest.Options.AddRange(dbOptions)\n\n'Select previous value based on bound field.\ndbxTest.BindTo(Macro.GetField(dbxTest.Field.FieldID))\n</code></pre> <pre><code>//Get Roles\nRoles roles = Loan.Session.Loans.Roles;\n//Create list to hold drop down options\nSystem.Collections.Generic.List&lt;DropdownOption&gt; dbOptions = new System.Collections.Generic.List&lt;DropdownOption&gt;();\n\n//Populate dropdown options with Role Name to be displayed\n//and role abbreviation as the value\nforeach (Role role in roles)\n{\n    dbOptions.Add(new DropdownOption(role.Name, role.Abbreviation));\n}\n\n//We can use this to sort the Roles by name\n//instead of what order they were added to the list\ndbOptions.Sort((DropdownOption x, DropdownOption y) =&gt; x.Text.CompareTo(y.Text));\n\n//Add blank option as first option\ndbOptions.Insert(0, new DropdownOption(\"\"));\n\n//Populate dropdown\ndbxTest.Options.AddRange(dbOptions);\n\n//Select previous value based on bound field.\ndbxTest.BindTo(Macro.GetField(dbxTest.Field.FieldID));\n</code></pre> <p>Note</p> <p>It may be worth calling the Clear method on the dropdown options before populating, if you have multiple events that could add options, otherwise you may end up with a list of options that looks odd. Using the example dropdown box from above, to clear the options you would write dbxTest.Options.Clear()</p>"},{"location":"IFB/DropDown/#removing-options","title":"Removing Options","text":"<p>Options from a Dropdown Box can also be removed programmatically. Below demonstrates how we can remove the Loan Officer option from a list of options.</p> VBC# <pre><code>'Loop through options in dropdown box and if\n'the options text matches our criteria rmove\n'that option from the list\nFor Each opt as DropdownOption in dbxTest.Options\n    If opt.Text = \"Loan Officer\" Then\n        dbxTest.Options.Remove(opt)\n    End If\nNext\n</code></pre> <pre><code>//Loop through options in dropdown box and if\n//the options text matches our criteria rmove\n//that option from the list\nforeach (DropdownOption opt in dbxTest.Options)\n{\n    if (opt.Text == \"Loan Officer\")\n    {\n        dbxTest.Options.Remove(opt);\n    }\n}\n</code></pre>"},{"location":"IFB/DropDown/#getting-the-selected-text-or-value","title":"Getting the selected Text or Value","text":"<p>The selected Value from a Dropdown Box can be called by using the Value property of the control. Using the examples from above to get the selected value of the dbxTest control we can simply call <code>dbxText.Value</code>. This works great if the Value and Text are the same, but if they are different then this will just return the Value and not the Text. The below shows how to get the Text of the selected option.</p> VBC# <pre><code>'Using the SelectedIndex for the selected item in the dropdown box\n'get the Text property from the Options in the dropdown\nDim selectedText = dbxTest.Options(dbxTest.SelectedIndex).Text\n</code></pre> <pre><code>//Using the SelectedIndex for the selected item in the dropdown box\n//get the Text property from the Options in the dropdown\nstring selectedText = dbxTest.Options[dbxTest.SelectedIndex].Text;\n</code></pre>"},{"location":"IFB/FormLog/","title":"Field Log","text":""},{"location":"IFB/FormLog/#overview","title":"Overview","text":"<p>Sometimes when build a form you want to capture changes to fields as users fill them out creating a log for that specific form. This can be accomplished by creating a string field with a large max length property and then mapping it to a multiline textbox on your form. In the code blocks below I have control on my form with the control ID of mtxtLog that I will be using to hold my log information and is mapped to my log field.</p> <p>Two ways we can accomplish this is:</p> <ol> <li>Write the same log code in each control we wish to monitor for changes</li> <li>Create a function  on the form that we can then use on the a control we want to log an action.</li> </ol> <p>Both of these methods are fired from the event change of the control.</p> <p>Note</p> <p>A controls value can change twice, this can happen when a when for example a control is mapped to a date field. Double entries can occur when the date is removed, one entry is for when the control is set to a blank value. The next entry happens when Encompass updates the mapped field to // for the blank date. Additional logic may be needed to account for changes like this.</p>"},{"location":"IFB/FormLog/#without-function","title":"Without Function","text":"VBC# <pre><code>'Get the current user ID\nDim currUser as string = Loan.Session.GetCurrentUser().ID\n\n'Get the date time of change\nDim changeDateTime as string = DateTime.Now.ToString()\n\n'Create a log string to add to log\n'Change controlid in the controlid.value to the controls ID that is being logged\n'Change value in the controlid.value to the corresponding property of the control\nDim logString as string = \"Control/Field:\" &amp; vbcrlf &amp; \"New Value: \" &amp; controlID.value &amp; \" - changed by: \" &amp; currUser &amp; \" on \" &amp; changeDateTime\n\n'If log has not value then add value\n'Make sure to update mtxtLog with the control being used for logging\nIf mtxtLog.value = String.Empty Then\n    mtxtLog.text = logString\n'Else log already has a value and we need to add to it\nElse\n    Dim orgText = mtxtLog.text\n    mtxtLog.text = String.Empty\n    mtxtLog.text = orgText + vbcrlf + vbcrlf + logString\nEnd If\n</code></pre> <pre><code>//Get the current user ID\nstring currUser = Loan.Session.GetCurrentUser().ID;\n\n//Get the date time of change\nstring changeDateTime = DateTime.Now.ToString();\n\n//Create a log string to add to log\n//Change the Control/Field to the unique ID of how you would like to identify the change\n//Change controlid in the controlid.value to the controls ID that is being logged\n//Change value in the controlid.value to the corresponding property of the control\nstring logString = \"Control/Field:\" + Environment.NewLine + \"New Value: \" + controlid.value + \" - changed by: \" + currUser + \" on \" + changeDateTime;\n\n//If log has not value then add value\n//Make sure to update mtxtLog with the control being used for logging\nif (mtxtLog.Value == String.Empty)\n{\n    mtxtLog.Text = logString;\n}\n//Else log already has a value and we need to add to it\nelse\n{\n    string orgText = mtxtLog.Text;\n    mtxtLog.Text = String.Empty;\n    mtxtLog.Text = orgText + Environment.NewLine + Environment.NewLine + logString;\n}\n</code></pre>"},{"location":"IFB/FormLog/#with-function","title":"With Function","text":""},{"location":"IFB/FormLog/#function","title":"Function","text":"<p>Warning</p> <p>I came across how to write the C# function recently inside the load event of a custom form and have not gotten a chance to fully test it out. As with all the code found on the internet make sure to test and understand before moving to a production environment.</p> VBC# <pre><code>'End Sub from load event\nEnd Sub\n\nPublic Function addLog(ByVal logAs as string, ByVal triggerControl as string) as String\n    'ARGs:\n    'logAs - this is a string that will be use to identify changes in the log\n    'triggerControl - this is the control ID of the control that is being logged\n\n\n    'Get the current user ID\n    Dim currUser as string = Loan.Session.GetCurrentUser().ID\n\n    'Get the date time of change\n    Dim changeDateTime as string = DateTime.Now.ToString()\n\n    'Find control\n    Dim foundControl = FindControl(triggerControl)\n\n    'Create a log string to add to log\n    Dim logString as string = logAs &amp; \":\" &amp; vbcrlf &amp; \"New Value: \" &amp; foundControl.Value &amp; \" - changed by: \" &amp; currUser &amp; \" on \" &amp; changeDateTime\n\n    'If log has not value then add value\n    'Make sure to update mtxtLog with the control being used for logging\n    If mtxtLog.value = String.Empty Then\n        mtxtLog.text = logString\n    'Else log already has a value and we need to add to it\n    Else\n        Dim orgText = mtxtLog.text\n        mtxtLog.text = String.Empty\n        mtxtLog.text = orgText + vbcrlf + vbcrlf + logString\n    End If\nEnd Function\n\n'Declare new sub to match with original load subs End Sub\nPublic Sub DummySub()\n</code></pre> <pre><code>//End of load event\n}\n\n//New class that holds custom methods to be used\nprivate class CustomMethods\n{\n    public static void addLog(string logAs, Control triggerControl, MultilineTextBox logControl)\n    {\n        /*\n        *ARGs:\n        *logAs - this is a string that will be use to identify changes in the log\n        *triggerControl - this is the control ID of the control that is being logged\n        *logControl = this is the multiline textbox that is used for the log\n        */\n\n        //Get the current user ID\n        string currUser = EncompassApplication.CurrentLoan.Session.GetCurrentUser().ID;\n\n        //Get the date time of change\n        string changeDateTime = DateTime.Now.ToString();\n\n\n        //Getting Controls Value\n        //Getting the type of control passed\n        Type controlType = triggerControl.GetType();\n\n        //Use reflection to get the value of the control\n        var valueProp = controlType.GetProperty(\"Value\");   \n        var cValue = valueProp.GetValue(triggerControl).ToString();\n\n        //Create a log string to add to log\n        string logString = logAs + \":\" + Environment.NewLine + \"New Value: \" + cValue + \" - changed by: \" + currUser + \" on \" + changeDateTime;\n\n\n\n        //If log has no value then add log string\n        //Make sure to update mtxtLog with the control beign used for logging\n        if (logControl.Value == String.Empty)\n        {\n            logControl.Text = logString;\n        }\n        //Else log already has a value and we need to add to it\n        else\n        {\n            string orgText = logControl.Text;\n            logControl.Text = String.Empty;\n            logControl.Text = orgText + Environment.NewLine + Environment.NewLine + logString;\n        }\n    }\n\n//Do not add a } for new class as there is already one\n//from the original load event    \n</code></pre>"},{"location":"IFB/FormLog/#calling-function","title":"Calling Function","text":"<p>To call the function created above, open the event box (double click on the control) of the control you are wanting to log. Add the below code to the event.</p> VBC# <pre><code>'Change logAs to how you would like to identify this change in the log\n'Change controlID to the ControlID that is triggering this addition to the log (this should be a string)\naddLog(\"logAs\", \"controlID\")\n</code></pre> <pre><code>//Change logAs to how you would like to identify this change in the log\n//Change controlID to the ControlID that is triggering this addition to the log (this should not be a string)\n//Change logControl to the ControlID of the multiline textbox that holds the log (this should not be a string)\nCustomMethods.addLog(\"logAs\", controlID, logControl);\n</code></pre>"},{"location":"IFB/LoanAssociates/","title":"Loan Associates","text":""},{"location":"IFB/LoanAssociates/#overview","title":"Overview","text":"<p>We can assign and unassign loan associates via code using the below snippets. This can be handy if we are setting up a process that should have a queue user assign to it after some setup code or unassign a user for a specific role.</p> <p>Info</p> <p>More information using the LoanAssociates and LoanAssociate classes can be found in the EncompassObjectsHelp.chm file.</p>"},{"location":"IFB/LoanAssociates/#assign","title":"Assign","text":""},{"location":"IFB/LoanAssociates/#role","title":"Role","text":"<p>We can assign a user or user group for a specific role using the below.</p> <p>Note</p> <p>If the same role is used for multiple milestones, setting a loan associate like this will set the role for all milestones that it is linked to.</p> VBC# UserUser Group <pre><code>'Get the User to be assigned to the Role\nDim assignUser as User = loan.session.Users.GetUser(\"UserID\")\n'Get the Role to be assigned\nDim assignRole as Role = loan.session.Loans.Roles.GetRoleByAbbrev(\"LP\")\n\n'Assign the user to the role for the loan\nloan.Associates.AssignUser(assignRole, assignUser)\n</code></pre> <pre><code>'Get the User Group to be assigned to the Role\nDim assignGroup as UserGroup = Loan.Session.Users.Groups.GetGroupByName(\"Group Name\")\n'Get the Role to be assigned\nDim assignRole as Role = loan.session.Loans.Roles.GetRoleByAbbrev(\"LP\")\n\n'Assign the User Group to the role for the loan\nloan.Associates.AssignUserGroup(assignRole, assignGroup)\n</code></pre> UserUser Group <pre><code>//Get the User to be assigned to the Role\nUser assignUser = Loan.Session.Users.GetUser(\"UserID\");\n//Get the Role to be assigned\nRole assignRole = Loan.Session.Loans.Roles.GetRoleByAbbrev(\"LP\");\n\n//Assign the user to the role for the loan\nLoan.Associates.AssignUser(assignRole, assignUser);\n</code></pre> <pre><code>//Get the User Group to be assigned to the Role\nUserGroup assignGroup = Loan.Session.Users.Groups.GetGroupByName(\"Group Name\");\n//Get the Role to be assigned\nRole assignRole = Loan.Session.Loans.Roles.GetRoleByAbbrev(\"LP\");\n\n//Assign the user to the role for the loan\nLoan.Associates.AssignUserGroup(assignRole, assignGroup);\n</code></pre>"},{"location":"IFB/LoanAssociates/#specific-milestone-role","title":"Specific Milestone Role","text":"<p>We can target a specific Role for a milestone using the below.</p> VBC# UserUser Group <pre><code>'Get the User to be assigned to the Role\nDim assignUser as User = loan.session.Users.GetUser(\"UserID\")\n\n'Get the Processing Milestone Event\n'Note that the Milestone name must match as it does in Encompass Settings\nDim msEvnt as MilestoneEvent = loan.Log.MilestoneEvents.GetEventForMilestone(\"Milestone Name\")\n\n'Assign Use to specific Milestone Event\nmsEvnt.LoanAssociate.AssignUser(assignUser)\n</code></pre> <pre><code>'Get the User Group to be assigned to the Role\nDim assignGroup as UserGroup = Loan.Session.Users.Groups.GetGroupByName(\"Group Name\")\n\n'Get the Processing Milestone Event\n'Note that the Milestone name must match as it does in Encompass Settings\nDim msEvnt as MilestoneEvent = loan.Log.MilestoneEvents.GetEventForMilestone(\"Milestone Name\")\n\n'Assign Use to specific Milestone Event\nmsEvnt.LoanAssociate.AssignUserGroup(assignGroup)\n</code></pre> UserUser Group <pre><code>//Get the User to be assigned to the Role\nUser assignUser = Loan.Session.Users.GetUser(\"UserID\");\n//Get the Processing Milestone Event\n//Note that the Milestone name must match as it does in Encompass Settings\nMilestoneEvent msEvnt = Loan.Log.MilestoneEvents.GetEventForMilestone(\"Milestone Name\");\n\n//Assign Use to specific Milestone Event\nmsEvnt.LoanAssociate.AssignUser(assignUser);\n</code></pre> <pre><code>//Get the User Group to be assigned to the Role\nUserGroup assignGroup = Loan.Session.Users.Groups.GetGroupByName(\"Group Name\");\n//Get the Processing Milestone Event\n//Note that the Milestone name must match as it does in Encompass Settings\nMilestoneEvent msEvnt = Loan.Log.MilestoneEvents.GetEventForMilestone(\"Milestone Name\");\n\n//Assign Use to specific Milestone Event\nmsEvnt.LoanAssociate.AssignUserGroup(assignGroup);\n</code></pre>"},{"location":"IFB/LoanAssociates/#unassign","title":"Unassign","text":"<p>The below shows how to clear the Loan Associate.</p> <p>Note</p> <p>The method used to clear/unassign a Loan Associate works for either User or User Group Assignments. Although the method for getting a specific user or user group may vary.</p>"},{"location":"IFB/LoanAssociates/#role_1","title":"Role","text":"VBC# <pre><code>'Get the Role to be unassigned\nDim unassignRole as Role = loan.session.Loans.Roles.GetRoleByAbbrev(\"LP\")\n\n'Get a list of loan associates by role\nDim assignedAssociates as LoanAssociateList = loan.Associates.GetAssociatesByRole(unassignRole)\n\n'For each loan associate in the assignedAssociates list\n'unassign the associate\nFor Each assignedAssociate as LoanAssociate in assignedAssociates\n    assignedAssociate.Unassign()\nNext\n</code></pre> <pre><code>//Get the Role to be unassigned\nRole unassignRole = Loan.Session.Loans.Roles.GetRoleByAbbrev(\"LP\");\n\n//Get a list of loan associates by role\nLoanAssociateList assignedAssociates = Loan.Associates.GetAssociatesByRole(unassignRole);\n\n//For each loan associate in the assignedAssociates list\n//unassign the associate\nforeach (LoanAssociate assignedAssociate in assignedAssociates)\n{\n    assignedAssociate.Unassign();\n}\n</code></pre>"},{"location":"IFB/LoanAssociates/#specific-milestone-role_1","title":"Specific Milestone Role","text":"VBC# <pre><code>'Get the Processing Milestone Event\n'Note that the Milestone name must match as it does in Encompass Settings\nDim msEvnt as MilestoneEvent = loan.Log.MilestoneEvents.GetEventForMilestone(\"Milestone Name\")\n\n'Unassign the user/group from the specific Milestone Event\nmsEvnt.LoanAssociate.Unassign()\n</code></pre> <pre><code>//Get the Processing Milestone Event\n//Note that the Milestone name must match as it does in Encompass Settings\nMilestoneEvent msEvnt = Loan.Log.MilestoneEvents.GetEventForMilestone(\"Milestone Name\");\n\n//Unassign the user/group from the specific Milestone Event\nmsEvnt.LoanAssociate.Unassign();\n</code></pre>"},{"location":"IFB/LoanAssociates/#specific-useruser-group","title":"Specific User/User Group","text":"VBC# UserUser Group <pre><code>'Get User to be unassigned\nDim assignedUser as User = loan.session.Users.GetUser(\"UserID\")\n\n'Get a list of loan associates assigned to user\nDim assignedAssociates as LoanAssociateList = loan.Associates.GetAssociatesByUser(assignedUser)\n\n'For each loan associate in the assignedAssociates list\n'unassign the associate\nFor Each assignedAssociate as LoanAssociate in assignedAssociates\n    assignedAssociate.Unassign()\nNext\n</code></pre> <pre><code>'Get User Group to be unassigned\nDim assignedGroup as UserGroup = Loan.Session.Users.Groups.GetGroupByName(\"Group Name\")\n\n'Get a list of loan associates assigned to user\nDim assignedAssociates as LoanAssociateList = loan.Associates.GetAssociatesByUserGroup(assignedGroup)\n\n'For each loan associate in the assignedAssociates list\n'unassign the associate\nFor Each assignedAssociate as LoanAssociate in assignedAssociates\n    assignedAssociate.Unassign()\nNext\n</code></pre> UserUser Group <pre><code>//Get User to be unassigned\nUser assignedUser = Loan.Session.Users.GetUser(\"UserID\");\n\n//Get a list of loan associates assigned to user\nLoanAssociateList assignedAssociates = Loan.Associates.GetAssociatesByUser(assignedUser);\n\n//For each loan associate in the assignedAssociates list\n//unassign the associate\nforeach (LoanAssociate assignedAssociate in assignedAssociates)\n{\n    assignedAssociate.Unassign();\n}\n</code></pre> <pre><code>//Get User Group to be unassigned\nUserGroup assignedGroup = Loan.Session.Users.Groups.GetGroupByName(\"Group Name\");\n\n//Get a list of loan associates assigned to user group\nLoanAssociateList assignedAssociates = Loan.Associates.GetAssociatesByUserGroup(assignedGroup);\n\n//For each loan associate in the assignedAssociates list\n//unassign the associate\nforeach (LoanAssociate assignedAssociate in assignedAssociates)\n{\n    assignedAssociate.Unassign();\n}\n</code></pre>"},{"location":"IFB/MessageBoxes/","title":"Message Boxes","text":""},{"location":"IFB/MessageBoxes/#overview","title":"Overview","text":"<p>The below provides information on how message boxes can be customized to include an icon and custom title. This gives us a little more flexibility than the built in Macro.Alert function that is provided in Encompass.</p>"},{"location":"IFB/MessageBoxes/#available-icons","title":"Available Icons","text":"<p>The below is a list of icons that are available to add to message boxes. The way icons are called can differ based on the language you are using, check out the code section for examples.</p> Name Icon Error/Hand/Stop Question Exclamation/Warning Asterisk/Information <p>Note</p> <p>These icons can be used both in VB.net and C# as arguments for the respective message box calls. The below button section provides more customization as VB.net's MsgBox differs from C#s when adding buttons.</p>"},{"location":"IFB/MessageBoxes/#available-buttons","title":"Available Buttons","text":"<p>The below list is the name and Enum of the different buttons that are options that are available:</p> VBC# <p>A variable can be used to combine icons and buttons to create a style that can be passed into the MsgBox call, see code examples below. More information can be found on the MsgBox function page from Microsoft.</p> Name Enum Description vbOKOnly 0 Display OK button only. vbOKCancel 1 Display OK and Cancel buttons. vbAbortRetryIgnore 2 Display Abort, Retry, and Ignore buttons. vbYesNoCancel 3 Display Yes, No, and Cancel buttons. vbYesNo 4 Display Yes and No buttons. vbRetryCancel 5 Display Retry and Cancel buttons. vbCritical 16 Display Critical Message icon. vbQuestion 32 Display Warning Query icon. vbExclamation 48 Display Warning Message icon. vbInformation 64 Display Information Message icon. <p>More information can be found on the MessageBoxButtons Enum page from Microsoft.</p> Name Description OK The message box contains an OK button. OKCancel The message box contains OK and Cancel buttons. AbortRetryIgnore The message box contains Abort, Retry, and Ignore buttons. YesNoCancel The message box contains Yes, No, and Cancel buttons. YesNo The message box contains Yes and No buttons. RetryCancel The message box contains Retry and Cancel buttons. CancelTryContinue Specifies that the message box contains Cancel, Try Again, and Continue buttons."},{"location":"IFB/MessageBoxes/#message-box-example-code","title":"Message Box Example Code","text":"VBC# <p>Structure of a MsgBox call is:</p> <p>Msgbox(message, button/icon style, title)</p> <pre><code>'No Icon with OK button\nMsgBox(\"No Icon\", 0, \"Title\")\n\n'Information Icon with default OK button\nMsgBox(\"Information/Asterisk\", vbInformation, \"Info Title\")\n\n'Warning Icon with default OK button\nMsgBox(\"Warning/Exclamation\", 48, \"Warning Title\")\n\n'Question Icon with default OK button\nMsgBox(\"Question\", vbQuestion, \"Question Title\")\n\n'Error Icon with default OK button\nMsgBox(\"Error/Stop/Hand\", 16, \"Error Title\")\n\n'Question Icon with Yes/No buttons\nDim btnStyle = 4 Or 32\nMsgBox(\"Question Yes or No?\", btnStyle, \"Question\")\n\n'Warning Icon with OK/Cancel buttons\nDim btnStyle2 = vbOKCancel Or vbExclamation\nMsgBox(\"Warning Ok or Cancel\", btnStyle2, \"Warning\")\n</code></pre> <p>Structure of a MessageBox call is:</p> <p>System.Windows.Forms.MessageBox.Show(message, title, buttons, icon);</p> <pre><code>//No Icon\nSystem.Windows.Forms.MessageBox.Show(\"No Icon\", \"Title\");\n\n//Information Icon with default OK button\nSystem.Windows.Forms.MessageBox.Show(\"Information/Asterisk\", \"Info Title\", 0, System.Windows.Forms.MessageBoxIcon.Information);\n\n//Warning Icon with default OK button\nSystem.Windows.Forms.MessageBox.Show(\"Warning/Exclamation\", \"Warning Title\", 0, System.Windows.Forms.MessageBoxIcon.Exclamation);\n\n//Question Icon with default OK button\nSystem.Windows.Forms.MessageBox.Show(\"Question\", \"Question Title\", 0, System.Windows.Forms.MessageBoxIcon.Question);\n\n//Error Icon with default OK button\nSystem.Windows.Forms.MessageBox.Show(\"Error/Stop/Hand\", \"Error Title\", 0, System.Windows.Forms.MessageBoxIcon.Error);\n\n//Question Icon with Yes/No buttons\nSystem.Windows.Forms.MessageBoxIcon icon1 = System.Windows.Forms.MessageBoxIcon.Question;\nSystem.Windows.Forms.MessageBoxButtons btn1 = System.Windows.Forms.MessageBoxButtons.YesNo;\nSystem.Windows.Forms.MessageBox.Show(\"Question Yes or No?\", \"Question\", btn1, icon1);\n\n//Warning Icon with OK/Cancel buttons\nSystem.Windows.Forms.MessageBoxButtons btn2 = System.Windows.Forms.MessageBoxButtons.OKCancel;\nSystem.Windows.Forms.MessageBox.Show(\"Warning Ok or Cancel\", \"Warning\", btn2, System.Windows.Forms.MessageBoxIcon.Exclamation);\n</code></pre>"},{"location":"IFB/MessageBoxes/#working-with-results","title":"Working with results","text":"<p>We can capture what button the user clicks and then use that for additional logic in our code. Below is are the possible results:</p> VBC# <p>More information can be found on the Return values page from Microsoft.</p> Name Value Description vbOK 1 OK vbCancel 2 Cancel vbAbort 3 Abort vbRetry 4 Retry vbIgnore 5 Ignore vbYes 6 Yes vbNo 7 No <p>More information can be found on the DialogResult Enum page from Microsoft.</p> Name Description None Nothing is returned from the dialog box. This means that the modal dialog continues running. OK The dialog box return value is OK (usually sent from a button labeled OK). Cancel The dialog box return value is Cancel (usually sent from a button labeled Cancel). Abort The dialog box return value is Abort (usually sent from a button labeled Abort). Retry The dialog box return value is Retry (usually sent from a button labeled Retry). Ignore The dialog box return value is Ignore (usually sent from a button labeled Ignore). Yes The dialog box return value is Yes (usually sent from a button labeled Yes). No The dialog box return value is No (usually sent from a button labeled No). TryAgain The dialog box return value is Try Again (usually sent from a button labeled Try Again). Continue The dialog box return value is Continue (usually sent from a button labeled Continue)."},{"location":"IFB/MessageBoxes/#code","title":"Code","text":"VBC# <pre><code>'Question Icon with Yes/No/Cancel buttons, storing results\n'in the result variable\nDim btnStyle3 = 3 Or vbQuestion\nDim result = MsgBox(\"Question Yes or No?\", btnStyle3, \"Question\")\n\n'Take action based on result\n'Answered Yes\nIf result = vbYes Then\n    Msgbox(\"Chose Yes\")\n'Answered No\nElse If result = 7 Then\n    Msgbox(\"Chose No\")\n'Answered Cancel\nElse If result = vbCancel\n    Msgbox(\"Chose Cancel\")\nEnd If\n</code></pre> <pre><code>//Question Icon with Yes/No/Cancel buttons, storing results\n//in the result variable\nSystem.Windows.Forms.MessageBoxIcon iconStyle = System.Windows.Forms.MessageBoxIcon.Question;\nSystem.Windows.Forms.MessageBoxButtons btnStyle = System.Windows.Forms.MessageBoxButtons.YesNoCancel;\nvar result = System.Windows.Forms.MessageBox.Show(\"Question Yes or No?\", \"Question\", btnStyle, iconStyle);\n\n//Take action based on result\n//Answer yes\nif (System.Windows.Forms.DialogResult.Yes == result)\n{\n    System.Windows.Forms.MessageBox.Show(\"Chose Yes\", \"Yes\");\n}\n//Answered No\nelse if (System.Windows.Forms.DialogResult.No == result)\n{\n    System.Windows.Forms.MessageBox.Show(\"Chose No\", \"No\");\n}\n//Answered Cancel\nelse if (System.Windows.Forms.DialogResult.Cancel == result)\n{\n    System.Windows.Forms.MessageBox.Show(\"Chose Cancel\", \"Cancel\");\n}\n</code></pre>"},{"location":"IFB/Milestones/","title":"Milestones","text":""},{"location":"IFB/Milestones/#overview","title":"Overview","text":"<p>The below provides information on how to complete/uncomplete milestones in a form event. We will also assign an associate to the milestone role. Make sure to test thoroughly when rolling milestones to make sure everything rolls as expected.</p> <p>Warning</p> <p>There are a couple of things to keep in mind when choosing to complete a milestone programmatically:</p> <ul> <li>This will finish the milestone and all milestones in between even if the user does not have permission to finish that milestone.</li> <li>The milestone completion date will be set to the date of when the rule was triggered, if milestones are skipped when finishing the milestone their completion dates will also be the trigger date.</li> <li>Unless we assign a user no users are assigned by default when a milestone is completed this way, this will leave milestone user roles unpopulated.</li> <li>Business rules such as Milestone Completion rules or Persona Access to Loan rules will not fire when a milestone is completed this way.</li> <li>The Started milestone will always be completed an cannot be uncompleted.</li> </ul>"},{"location":"IFB/Milestones/#complete-milestone","title":"Complete Milestone","text":"<p>The below shows how to complete a milestone while adjusting the completion date to the day the code ran. It also updates the role of the loan associate for the next milestone.</p> <p>Note</p> <p>After we complete the Milestone we call the AdjustDate method on our MilestoneEvent object to update the completion date which takes three arguments:</p> <ul> <li>newDate: This must be a valid date object, we use DateTime.Now to pass the current date to be used.</li> <li>allowAdjustPastMilestones: This is a boolean that when set to true will adjust past milestones expected completion dates to be adjusted based on the new date.</li> <li>allowAdjustFutureMilestones: This is a boolean that when set to true will adjust future milestones expected completion to be adjusted based on the new date.</li> </ul> <p>More information can be found on the MilestoneEvent.AdjustDate Method in the EncompassObjectsHelp.chm file.</p> VBC# <pre><code>'Get the user we are assigning to Milestone\nDim assignUser as EllieMae.Encompass.BusinessObjects.Users.User = loan.session.Users.GetUser(\"UserID\")\n\n'Get the Processing Milestone\n'Note that the Milestone name must match as it does in Encompass Settings\nDim ms as Milestone = loan.session.Loans.Milestones.GetItemByName(\"Milestone Name\")\n\n'Get the Milestone Event for the Processing Milestone\nDim msEvnt as EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent = loan.Log.MilestoneEvents.GetEventForMilestone(ms.Name)\n\n'Get the Milestone Event for the Next Milestone\n'this will be used to update the role for that milestone\nDim nxtMSEvnt as EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent = loan.Log.MilestoneEvents.GetEventForMilestone(ms.Next.Name)\n\n'Check to see if Milestone has already been completed\n'if it has not then complete the milestone,\n'adjust the completion date and assign the\n'loan associate for the next milestone\nIf msEvnt.Completed = false Then\n    'Get the loan associate object for the next milestone role\n    Dim lnAssociate as LoanAssociate = nxtMSEvnt.LoanAssociate\n\n    'Only assign the new user is no associate has been\n    'assigned already\n    If lnAssociate.Assigned = false  Then\n        lnAssociate.AssignUser(assignUser)\n    End If\n\n    'Complete the Processing Milestone\n    msEvnt.Completed = true\n    'Adjust the expected completion date of the Processing Milestone\n    msEvnt.AdjustDate(DateTime.Now, false, true)\nEnd If\n</code></pre> <pre><code>//Get the user we are assigning to Milestone\nUser assignUser = Loan.Session.Users.GetUser(\"UserID\");\n\n//Get the Processing Milestone\n//Note that the Milestone name must match as it does in Encompass Settings\nMilestone ms = Loan.Session.Loans.Milestones.GetItemByName(\"Milestone Name\");\n\n//Get the Milestone Event for the Processing Milestone\nEllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent msEvnt = Loan.Log.MilestoneEvents.GetEventForMilestone(ms.Name);\n\n//Get the Milestone Event for the Next Milestone\n//this will be used to update the role for that milestone\nEllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent nxtMSEvnt = Loan.Log.MilestoneEvents.GetEventForMilestone(ms.Next.Name);\n\n/*\n* Check to see if Milestone has already been completed\n* if it has not then complete the milestone,\n* adjust the completion date and assign the\n* loan associate for the next milestone\n*/\nif (msEvnt.Completed == false)\n{\n    //Get the loan associate object for the next milestone role\n    LoanAssociate lnAssociate = nxtMSEvnt.LoanAssociate;\n\n    //Only assign the new user is no associate has been\n    //assigned already\n    if (lnAssociate.Assigned == false)\n    {\n        lnAssociate.AssignUser(assignUser);\n    }\n\n    //Complete the Processing Milestone\n    msEvnt.Completed = true;\n    //Adjust the expected completion date of the Processing Milestone\n    msEvnt.AdjustDate(DateTime.Now, false, true);\n}\n</code></pre>"},{"location":"IFB/Milestones/#uncomplete-milestone","title":"Uncomplete Milestone","text":"<p>Similar to how we can complete a milestone, the below demonstrates how we can uncomplete a milestone. Like with the complete milestone code we use the AdjustDate method to update the expected completion date, please see the note above on the arguments for the this method.</p> VBC# <pre><code>'Get the Processing Milestone Event\n'Note that the Milestone name must match as it does in Encompass Settings\nDim msEvnt as MilestoneEvent = loan.Log.MilestoneEvents.GetEventForMilestone(\"Milestone Name\")\n\n'Check to see if Milestone has already been completed\n'if it has then uncomplete the milestone and\n'adjust the completion date to 2 days from today\nIf msEvnt.Completed = true Then\n    'Uncomplete Milestone\n    msEvnt.Completed = false\n    'Adjust the expected completion date of the Milestone\n    msEvnt.AdjustDate(DateTime.Now.AddDays(2), false, true)\nEnd If\n</code></pre> <pre><code>//Get the Processing Milestone Event\n//Note that the Milestone name must match as it does in Encompass Settings\nMilestoneEvent msEvnt = Loan.Log.MilestoneEvents.GetEventForMilestone(\"Milestone Name\");\n\n//Check to see if Milestone has already been completed\n//if it has then uncomplete the milestone and\n//adjust the completion date to 2 days from today\nif (msEvnt.Completed == true)\n{\n    //Uncomplete Milestone\n    msEvnt.Completed = false;\n    //Adjust the expected completion date of the Milestone\n    msEvnt.AdjustDate(DateTime.Now.AddDays(2), false, true);\n}\n</code></pre>"},{"location":"IFB/PrintDocToeFolder/","title":"Print Document to eFolder","text":""},{"location":"IFB/PrintDocToeFolder/#overview","title":"Overview","text":"<p>The below code is used in conjunction with a Print Auto Select business rule to print an attachment to the eFolder and place it in the correct document placeholder. If the document placeholder is not part of the eFolder it will attempt to create it. If the conversion of the document take to long the document will remain in the File Manager and the user will receive a message letting them know the attachment is in the File Manager.</p>"},{"location":"IFB/PrintDocToeFolder/#print-auto-select-rule","title":"Print Auto Select Rule","text":"<p>Below is an example of how a Print Auto Select rule should be setup to work with this code:</p> <p></p>"},{"location":"IFB/PrintDocToeFolder/#code","title":"Code","text":"VBC# <pre><code>'Get the current User\nDim currUser as User = Loan.Session.GetCurrentUser()\n'Create an array of Persona names\nDim arrPersonas() as string = {\"Super Administrator\", \"Administrator\"}\n'Create boolean to hold if user is admin\nDim isAdminUser as Boolean = False\n\n'Loop through the Persona array\nFor Each arrPersona as String in arrPersonas\n    'Get the Persona object by name\n    Dim aPersona as Persona = Loan.Session.Users.Personas.GetPersonaByName(arrPersona)\n    'Check if current user has an administartor persona\n    If currUser.Personas.Contains(aPersona) Then\n        isAdminUser = True\n        Exit For\n    End If\nNext\n\n'Triggers print auto selection rule\nDim autoPrintField = loan.Fields(\"CX.AUTOPRINT.TEST\")\nautoPrintField.Value = \"Y\"\n\n'Opens pipeline view and switches back to loan view, necessary for correct print dialog window\nMacro.SendKeys(\"^+p\")\nMacro.SendKeys(\"^+l\")\n\n'Opens print dialog\nMacro.SendKeys(\"^p\")\n\n'TAB keystrokes to \"Add to eFolder\" button\n' 7 works for Admins\n' 6 works for non admin users\nDim tabsToAddToEFolder = 0\nIf isAdminUser Then\n    tabsToAddToEFolder = 7\nElse\n    tabsToAddToEFolder = 6\nEnd If\n\n'To Add to Efolder\nMacro.SendKeys(\"{TAB \" &amp; tabsToAddToEFolder.ToString() &amp; \"}\")\n\n'Prints form\nMacro.SendKeys(\"~\")\n'Forces SendKeys events to act\nSystem.Windows.Forms.Application.DoEvents()\n\n'Declare variable for current Encompass process\nDim p As System.Diagnostics.Process = System.Diagnostics.Process.GetCurrentProcess()\n\n'Loop until File Manager is active window before trying to close it.\nDo\n    If p.MainWindowTitle = \"File Manager\"\n        'Closes File Manager window\n        Macro.SendKeys(\"%{F4}\")\n        'Forces SendKeys events to act\n        System.Windows.Forms.Application.DoEvents()\n        Exit Do\n    End If\nLoop Until p.MainWindowTitle = \"File Manager\"\n\n\n'Disables print auto selection rule\nautoPrintField.Value = \"N\"\n\n'Declare name of print form expected to drop in Unassigned folder\n'This should match the name of the document that is being printed\nDim attName = \"Gift Letter\"\n\n'Declare variable for located attachment -&gt; set to Nothing at first\nDim foundAtt As Attachment = Nothing\n\n'Loop until attachment is done converting // loop stops checking if taking too long to convert\nTry\n    Do\n        For Each att As Attachment In loan.Attachments\n            If att.Title = attName AndAlso att.GetDocument() Is Nothing AndAlso att.Size &gt; 0 Then\n                foundAtt = att\n                Exit Try\n            End If\n        Next\n    Loop Until foundAtt IsNot Nothing\nCatch\n    MsgBox(\"Conversion of document took to long.\", 16, \"Problem\")\n    Exit Try\nEnd Try\n\n'Find or create eFolder document\nDim trackedDocs = Loan.Log.TrackedDocuments\nDim documentName = \"eFolder Document Name\"\nDim list = trackedDocs.GetDocumentsByTitle(documentName)\nDim trackedDoc = If(list.Count &gt; 0, DirectCast(list(0), TrackedDocument), trackedDocs.Add(documentName, \"Processing\"))\n\nTry\n    'Move attachment to eFolder document\n    trackedDoc.Attach(foundAtt)\n    Macro.Alert(attName &amp; \" successfully added to eFolder.\")\n    Exit Try\nCatch\n    'Catch exception when Encompass tries to move the attachment but can't find it (still converting)\n    Macro.Alert(attName &amp; \" is taking too long to convert. Go to Unassigned folder and manually move the form to its Document placeholder.\")\nEnd Try\n</code></pre> <pre><code>//Get the current user\nUser currUser = Loan.Session.GetCurrentUser();\n//Create an array of Persona names\nstring[] arrPersonas = {\"Super Administrator\", \"Administrator\"};\n//Create boolean to hold if user is admin\nbool isAdminUser = false;\n\n//Loop through the Persona array\nforeach (string arrPersona in arrPersonas)\n{\n    Persona aPersona = Loan.Session.Users.Personas.GetPersonaByName(arrPersona);\n\n    //Check if current user has persona and do something\n    if (currUser.Personas.Contains(aPersona))\n    {\n        isAdminUser = true;\n    }\n}\n\n//Trigger print auto select rule\nField autoPrintField = Loan.Fields[\"CX.AUTOPRINT.TEST\"];\nautoPrintField.Value = \"Y\";\n\n//Opens pipeline view and switches back to loan view, necessary for correct print dialog window\nMacro.SendKeys(\"^+p\");\nMacro.SendKeys(\"^+l\");\n\n//Opens print dialog\nMacro.SendKeys(\"^p\");\n\n//TAB keystrokes to \"Add to eFolder\" button\n// 7 works for Admins\n// 6 works for non admin users\nint tabsToAddToEFolder = 0;\nif (isAdminUser)\n{\n    tabsToAddToEFolder = 7;\n}\nelse\n{\n    tabsToAddToEFolder = 6;\n}\n\n//To Add to Efolder\nMacro.SendKeys(\"{TAB \" + tabsToAddToEFolder.ToString() + \"}\");\n\n//Prints form\nMacro.SendKeys(\"~\");\n//Forces SendKeys events to act\nSystem.Windows.Forms.Application.DoEvents();\n\n//Declare variable for current Encompass process\nSystem.Diagnostics.Process p = System.Diagnostics.Process.GetCurrentProcess();\n\n//Loop until File Manager is active window before trying to close it.\ndo\n{\n    if (p.MainWindowTitle == \"File Manager\")\n    {\n        //Closes File Manager window\n        Macro.SendKeys(\"%{F4}\");\n        // Forces SendKeys events to act\n        System.Windows.Forms.Application.DoEvents();\n        break;\n    }\n} while (p.MainWindowTitle == \"File Manager\");\n\n\n//Disables print auto selection rule\nautoPrintField.Value = \"N\";\n\n//Declare name of print form expected to drop in Unassigned folder\n//This should match the name of the document that is being printed\nstring attName = \"Gift Letter\";\n\n//Declare variable for located attachment -&gt; set to Nothing at first\nAttachment foundAtt = null;\n\n//Loop until attachment is done converting // loop stops checking if taking too long to convert\ntry\n{\n    do\n    {\n        foreach (Attachment att in Loan.Attachments)\n        {\n            if (att.Title == attName &amp;&amp; att.GetDocument() == null &amp;&amp; att.Size &gt; 0)\n            {\n                foundAtt = att;\n                break;\n            }\n        }\n    } while (foundAtt == null);\n}   \ncatch\n{\n    System.Windows.Forms.MessageBox.Show(\"Conversion of document took to long.\", \"Problem\", System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Error);\n}\n\n//Find or create eFolder document\nLogTrackedDocuments trackedDocs = Loan.Log.TrackedDocuments;\nstring documentName = \"eFolder Document Name\";\nLogEntryList list = trackedDocs.GetDocumentsByTitle(documentName);\nTrackedDocument trackedDoc = (list.Count &gt; 0) ? (TrackedDocument)list[0] : trackedDocs.Add(documentName, \"Processing\");\n\ntry\n{\n    //Move attachment to eFolder document\n    trackedDoc.Attach(foundAtt);\n    Macro.Alert(attName + \" successfully added to eFolder.\");\n}\ncatch\n{\n    //Catch exception when Encompass tries to move the attachment but can't find it (still converting)\n    Macro.Alert(attName + \" is taking too long to convert. Go to Unassigned folder and manually move the form to its Document placeholder.\");\n}\n</code></pre>"},{"location":"IFB/SaveToCSV/","title":"Save File to CSV file","text":""},{"location":"IFB/SaveToCSV/#overview","title":"Overview","text":"<p>The below provides a way to save information from a String Builder object to a CSV file. This can be handy for exporting items from Encompass such as user lists or list of templates.</p> VBC# <pre><code>'Save Dialog object\nDim saveFile As New System.Windows.Forms.SaveFileDialog\n\n'Create filter to only allow the CSV extension\nsaveFile.Filter = \"CSV files (*.csv)|*.csv\"\nsaveFile.CheckPathExists = True\nsaveFile.FilterIndex = 0\n\n'Show Save Dialog Box, if user choose OK and the file name is greater than 0 characters long\nIf saveFile.ShowDialog() = System.Windows.Forms.DialogResult.OK And saveFile.FileName.Length &gt; 0 Then\n    'Save CSV file\n    Using fileStrm as System.IO.FileStream = New System.IO.FileStream(saveFile.FileName, System.IO.FileMode.Create, System.IO.FileAccess.Write)\n        Using streamWtr as System.IO.StreamWriter = New System.IO.StreamWriter(fileStrm)\n            streamWtr.Write(StringBuilderObject.ToString())\n        End Using\n    End Using\n\n    'Give user success message once save is completed\n    Macro.Alert(\"File saved: \" &amp; saveFile.FileName)\n\n'If the user does not click ok or provide a file name display message\nElse\n    Macro.Alert(\"Please specify output file.\")\nEnd If\n</code></pre> <pre><code>//Save Dialog object\nSystem.Windows.Forms.SaveFileDialog saveFile = new System.Windows.Forms.SaveFileDialog();\n\nsaveFile.Filter = \"CSV files (*.csv)|*.csv\";\nsaveFile.CheckPathExists = true;\nsaveFile.FilterIndex = 0;\n\nif (saveFile.ShowDialog() == System.Windows.Forms.DialogResult.OK &amp;&amp; saveFile.FileName.Length &gt; 0)\n{\n    //Save CSV file\n    using (System.IO.FileStream fileStrm = new System.IO.FileStream(saveFile.FileName, System.IO.FileMode.Create, System.IO.FileAccess.Write))\n    {\n        using (System.IO.StreamWriter streamWtr = new System.IO.StreamWriter(fileStrm))\n        {\n            streamWtr.Write(StringBuilderObject.ToString());\n        }\n    }\n\n    //Give user success message once save is completed\n    Macro.Alert(\"File saved: \" + saveFile.FileName);\n}\n//If the user does not click ok or provide a file name display message\nelse \n{\n    Macro.Alert(\"Please specify output file\");\n}\n</code></pre>"},{"location":"IFB/SendEmail/","title":"Send Emails","text":""},{"location":"IFB/SendEmail/#overview","title":"Overview","text":"<p>The below will allow for emails to be sent via that Outlook application. The email can be sent using email address fields, in the blocks below we use the borrower and co-borrower emails addresses, along with using fields in the body and subject line. Files from the eFolder can also be attached and is also demonstrated in the code below.</p> VBC# <pre><code>'Variables for Borrower information and property\nDim borrName as String = Macro.GetField(\"4000\") &amp; \" \" &amp; Macro.GetField(\"4002\")\nDim borrEmail as String = Macro.GetField(\"1240\")\nDim coBorrEmail as String = Macro.GetField(\"1268\")\nDim loanNumber as String = Macro.GetField(\"364\")\nDim subAddress As String = Macro.GetField(\"11\")\nDim subCity As String = Macro.GetField(\"12\")\nDim subState As String = Macro.GetField(\"14\")\nDim subZip As String = Macro.GetField(\"15\")\n\n'Variables for creating and sending email plus attachment\nDim OutApp As Object\nDim OutMail As Object\nDim strBody as String\nDim sendEmail as Boolean\nDim emailSubject as String = \"Document is ready for loan : \" &amp; loanNumber\n\n'path to the users My Documents folder\nDim path as string = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) &amp; \"\\\\\"\nDim docLocation as String\nDim docName as String\nDim foundAtt as Attachment\n\n'Setting the Document we are looking for in the eFolder\ndocName = \"eFolder Document Name\"\n\n'Create a date to compare to attachment dates\nDim maxDate as DateTime = new DateTime(1990, 1, 1)\n\n'Loop through the eFolder for the document and grab the most recent attachment\nFor Each doc as TrackedDocument in Loan.Log.TrackedDocuments.GetDocumentsByTitle(docName)\n    'Loop through each attachment and get attachment with the newest date time\n    For Each att as Attachment in doc.GetAttachments\n        If att.Date &gt; maxDate And att.IsActive then\n            maxDate = att.Date\n            foundAtt = att\n        End If\n    Next\nNext\n\n'If there was no attachment found then notify user\nIf foundAtt is Nothing then\n    MsgBox(\"No active attachments found in the \" &amp; docName &amp; \" placeholder.\", 0, \"No attachments\")\n    sendEmail = False\n'If there is an attachment then save document to hard drive and mark to send email\nElse\n    docLocation = path &amp; borrName &amp; \" \" &amp; docName &amp; \".pdf\"\n    foundAtt.SaveToDisk(docLocation)\n    sendEmail = True\nEnd If\n\n'Sending email\nIf sendEmail = True Then\n\n    'Setting up Outlook Object\n    OutApp = CreateObject(\"Outlook.Application\")\n    OutMail = OutApp.CreateItem(0)\n\n    'Creating body of Email\n    strBody = \"Attached is a copy of the appraisal for: \" &amp; _\n              \"&lt;br /&gt;&lt;br /&gt;Subject Property:&lt;br /&gt;&lt;br /&gt;\" &amp; _\n              subAddress &amp; \"&lt;br /&gt;\" &amp; _\n              subCity &amp; \",\" &amp; subState &amp; \" \" &amp; subZip\n\n\n    'Composing the email and displaying it\n    With OutMail\n        .To = borrEmail &amp; \";\" &amp; coBorrEmail\n        .CC = \"\"\n        .BCC = \"\"\n        .Subject = emailSubject\n        .HTMLBody = strBody\n        .Attachments.Add(docLocation)\n        'Uncomment to show the email message before sent\n        .Display\n        'Uncomment to auto send the email\n        '.Send\n    End With\n\n    'Adding entry into Loan Log\n    Dim conv As Conversation = loan.log.conversations.add(DateTime.Now)\n    conv.HeldWith = \"Appraisal Sent\"\n    conv.EmailAddress = borrEmail\n    conv.NewComments = \"Appraisal was sent to: \" &amp; borrEmail\n    conv.ContactMethod = ConversationContactMethod.Email\n    conv.DisplayInLog = True\n\nEnd If\n\n'If attachment was saved then remove from hard drive\nIf docLocation &lt;&gt; Nothing Then\n    System.IO.FIle.Delete(docLocation)\nEnd If\n</code></pre> <pre><code>//Variables for Borrower information and property\nstring borrName = Macro.GetField(\"4000\") + \" \" + Macro.GetField(\"4002\");\nstring borrEmail = Macro.GetField(\"1240\");\nstring coBorrEmail = Macro.GetField(\"1268\");\nstring loanNumber = Macro.GetField(\"364\");\nstring subAddress = Macro.GetField(\"11\");\nstring subCity = Macro.GetField(\"12\");\nstring subState = Macro.GetField(\"14\");\nstring subZip = Macro.GetField(\"15\");\n\n//Variables for creating and sending email plus attachment\nSystem.Text.StringBuilder strBody = new System.Text.StringBuilder();\nbool sendEmail = false;\nstring emailSubject = \"Document is ready for loan : \" + loanNumber;\n\n//path to the users My Documents folder\nstring path = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + \"\\\\\";\nstring docLocation = \"\";\nstring docName = \"\";\nAttachment foundAtt = null;\n\n//Setting the Document we are looking for in the eFolder\ndocName = \"eFolder Document Name\";\n\n//Create a date to compare to attachment dates\nDateTime maxDate = new DateTime(1990, 1, 1);\n\n//Loop through the eFolder for the document and grab the most recent attachment\nforeach (TrackedDocument doc in Loan.Log.TrackedDocuments.GetDocumentsByTitle(docName))\n{\n    //Loop through each attachment and get attachment with the newest date time\n    foreach (Attachment att in doc.GetAttachments())\n    {\n        if (att.Date &gt; maxDate &amp;&amp; att.IsActive)\n        {\n            maxDate = att.Date;\n            foundAtt = att;\n        }\n    }\n}\n\n//If there was no attachment found then notify user\nif (foundAtt == null)\n{\n    System.Windows.Forms.MessageBox.Show(\"No active attachments found in the \" + docName + \" placeholder.\", \"No attachments\", 0);\n    return;\n}\n//If there is an attachment then save document to hard drive and mark to send email\nelse\n{\n    docLocation = path + borrName + \" \" + docName + \".pdf\";\n    foundAtt.SaveToDisk(docLocation);\n    sendEmail = true;\n}\n\n//Sending email\nif (sendEmail = true) \n{\n    //Setup email body\n    strBody.AppendLine(\"Attached is a copy of the document for:\").AppendLine().AppendLine(\"Subject Property:\").AppendLine(subAddress).AppendLine(subCity + \", \" + subState + \" \" + subZip);\n\n    //Setting up Outlook Object\n    Type OutlookType = Type.GetTypeFromProgID(\"Outlook.Application\");\n    object OutlookInst = Activator.CreateInstance(OutlookType);\n\n    //Creating MailItem object\n    object mailItem = OutlookType.InvokeMember(\"CreateItem\", System.Reflection.BindingFlags.InvokeMethod, null, OutlookInst, new object[] { 0 });\n\n    //If MailItem is not null populate MailItem properties include attachment\n    if (mailItem != null)\n    {\n        mailItem.GetType().InvokeMember(\"Subject\", System.Reflection.BindingFlags.SetProperty, null, mailItem, new object[] { emailSubject });\n        mailItem.GetType().InvokeMember(\"Body\", System.Reflection.BindingFlags.SetProperty, null, mailItem, new object[] { strBody.ToString() });\n        mailItem.GetType().InvokeMember(\"To\", System.Reflection.BindingFlags.SetProperty, null, mailItem, new object[] { borrEmail + \";\" + coBorrEmail });\n        mailItem.GetType().InvokeMember(\"CC\", System.Reflection.BindingFlags.SetProperty, null, mailItem, new object[] { \"\" });   \n        mailItem.GetType().InvokeMember(\"Attachments\", System.Reflection.BindingFlags.GetProperty, null, mailItem, null)\n        .GetType().InvokeMember(\"Add\", System.Reflection.BindingFlags.InvokeMethod, null, mailItem.GetType().InvokeMember(\"Attachments\", System.Reflection.BindingFlags.GetProperty, null, mailItem, null), new object[] { docLocation });\n\n\n        //Only have one of these active at the time\n        //Show Email\n        mailItem.GetType().InvokeMember(\"Display\", System.Reflection.BindingFlags.InvokeMethod, null, mailItem, null);\n        //Send Email\n        //mailItem.GetType().InvokeMember(\"Send\", System.Reflection.BindingFlags.InvokeMethod, null, mailItem, null);\n    }\n    //If MailItem is null then warn the user.\n    else\n    {\n        System.Windows.Forms.MessageBox.Show(\"No mail item created.\");\n        return;\n    }\n\n    //Adding entry into Loan Log\n    Conversation conv = Loan.Log.Conversations.Add(DateTime.Now);\n    conv.HeldWith = \"Email Sent\";\n    conv.EmailAddress = borrEmail;\n    conv.NewComments = \"Document was sent to: \" + borrEmail;\n    conv.ContactMethod = ConversationContactMethod.Email;\n    conv.DisplayInLog = true;\n}\n\n//If attachment was saved then remove from hard drive\nif (docLocation != null)\n{\n    System.IO.File.Delete(docLocation);\n}\n</code></pre>"},{"location":"IFB/SizingAndLocation/","title":"Change a controls Size or Position","text":""},{"location":"IFB/SizingAndLocation/#overview","title":"Overview","text":"<p>The below code helps with sizing and positioning of controls in a form. While a panel is used for the code blocks below most controls can be moved or resized.</p>"},{"location":"IFB/SizingAndLocation/#changing-size","title":"Changing Size","text":"<p>Most controls can have their size changed programmatically using the Size property.</p> VBC# <pre><code>'Set the control to a new size\n'The first argument for Size is the width\n'The second argument for the Size is the height\npnlTest.Size = New Size(100, 200)\n</code></pre> <pre><code>//Set the control to a new size\n//The first argument for Size is the width\n//The second argument for the Size is the height\npnlTest.Size = new Size(100, 200);\n</code></pre>"},{"location":"IFB/SizingAndLocation/#changing-position","title":"Changing Position","text":"<p>Most controls can position on the form can be changed programmatically using the Position property. Its import to keep in mind that the position is relative to the controls parent, so when moving a text box in a panel, position 0,0 is relative to the panel the text box is in and not the whole form.</p> VBC# <pre><code>'Set the control to a new position\n'The first argument for the Point is the X\n'The second argument for the Point is the Y\ntxtTest.Position = New Point(10, 10)\n</code></pre> <pre><code>//Set the control to a new position\n//The first argument for the Point is the X\n//The second argument for the Point is the Y\ntxtTest.Position = new Point(10, 10);\n</code></pre>"},{"location":"IFB/SortConditions/","title":"Sort Conditions","text":""},{"location":"IFB/SortConditions/#overview","title":"Overview","text":"<p>The below code allows us to capture conditions and sort them in order based on the first element of how we create our list. This can be helpful if you are wanting to create a form or a custom print form that list out conditions and want them in a certain order.</p> <p>Note</p> <p>I know these methods work with the standard conditions found in the eFolder. I do not believe they will work with Enhanced Conditions as there currently are no SDK calls for Enhanced Conditions. Currently I do not have an environment with Enhanced Conditions enabled to test what API calls need to be made to replicate this. Will try and update once that is available.</p>"},{"location":"IFB/SortConditions/#preliminary-conditions","title":"Preliminary Conditions","text":"<p>The below provides the available properties and code to retrieve all Preliminary conditions and sort them by condition title. Additional logic can be added as a filter to pull only conditions relative to the task.</p>"},{"location":"IFB/SortConditions/#properties","title":"Properties","text":"<p>Listed below are a condensed list of properties for a PreliminaryCondition object. More can be found in the EncompassObjects Help file.</p> Name Description AddedBy User ID who added BorrowerPair Associated Borrower Pair Category Conditions category DateAdded Date condition was added DateExpected Expected date to be received DateFulfilled Date condition was fulfilled DateReceived Date condition was received DateRequested Date condition was requested DateRerequested Date condition was rerequested DaysToReceive Day from the date requested until the condition is due Description Conditions description Fulfilled Indicates if condition has been marked as fulfilled FulfilledBy User ID of user who received the condition PriorTo Event prior to which the condition must be satisfied Received Indicates if condition has been marked received ReceivedBy User ID of user who received the condition Requested Indicates if condition has been marked requested RequestedBy User ID of user who requested the condition RequestedFrom User the condition was requested from ReRequested Indicates if condition has been marked rerequested RerequestedBy User ID of user who rerequested the condition Status Current status of the condition Title Title of the condition"},{"location":"IFB/SortConditions/#code","title":"Code","text":"VBC# <pre><code>'Create a list to hold our conditions in the format we want\n'the first element of each item will be used to sort\nDim conditions As New System.Collections.Generic.List(Of String)\n\n'Loop through the Preliminary Conditions and add to list\nFor Each condition as PreliminaryCondition in Loan.Log.PreliminaryConditions\n    conditions.Add(condition.Title &amp; \" - \" &amp; condition.Description)\nNext\n\n'Sort our conditions list\nconditions.Sort()\n\n'Set field with sorted conditions\nMacro.SetField(\"CX.CUSTOM.LOG\", String.Join(vbcrlf, conditions.ToArray()))\n</code></pre> <pre><code>//Create a list to hold our conditions in the format we want\n//the first element of each item will be used to sort\nSystem.Collections.Generic.List&lt;string&gt; conditions = new System.Collections.Generic.List&lt;string&gt;();\n\n//Loop through the Preliminary Conditions and add to list\nforeach (PreliminaryCondition condition in Loan.Log.PreliminaryConditions)\n{\n    conditions.Add(condition.Title + \" - \" + condition.Description);\n}\n\n//Sort our conditions list\nconditions.Sort();\n\n//Set field with sorted conditions\nMacro.SetField(\"CX.CUSTOM.LOG\", String.Join(Environment.NewLine, conditions.ToArray()));\n</code></pre>"},{"location":"IFB/SortConditions/#underwriting-conditions","title":"Underwriting Conditions","text":"<p>The below provides the available properties and code to retrieve all Underwriting conditions and sort them by condition title. Additional logic can be added as a filter to pull only conditions relative to the task.</p>"},{"location":"IFB/SortConditions/#properties_1","title":"Properties","text":"<p>Listed below are a condensed list of properties for a UnderwritingCondition object. More can be found in the EncompassObjects Help file.</p> Name Description AddedBy User ID who added BorrowerPair Associated Borrower Pair Category Conditions category Cleared Indicates if condition has been cleared ClearedBy User ID of user who cleared the condition DateAdded Date condition was added DateCleared Date condition was cleared DateFulfilled Date condition was fulfilled DateReceived Date condition was received DateRejected Date condition was rejected DateRequested Date condition was requested DateRerequested Date condition was rerequested DateReviewed Date condition was reviewed DateWaived Date condition was waived Description Conditions description ForExternalUse Indicates if condition is for external display ForInternalUse Indicates if condition is for internal display ForRole Role condition is meant for Fulfilled Indicates if condition has been marked as fulfilled FulfilledBy User ID of user who received the condition PriorTo Event prior to which the condition must be satisfied Received Indicates if condition has been marked received ReceivedBy User ID of user who received the condition Rejected Indicates if condition has been marked rejected RejectedBy User ID of user who rejected the condition Requested Indicates if condition has been marked requested RequestedBy User ID of user who requested the condition ReRequested Indicates if condition has been marked rerequested RerequestedBy User ID of user who rerequested the condition Reviewed Indicates if condition has been marked reviewed ReviewedBy User ID of user who reviewed the condition Status Current status of the condition Title Title of the condition Waived Indicates if the condition has been marked waived WaivedBy User ID of user who waived the condition"},{"location":"IFB/SortConditions/#code_1","title":"Code","text":"VBC# <pre><code>'Create a list to hold our conditions in the format we want\n'the first element of each item will be used to sort\nDim conditions As New System.Collections.Generic.List(Of String)\n\n'Loop through the Preliminary Conditions and add to list\nFor Each condition as UnderwritingCondition in Loan.Log.UnderwritingConditions\n    conditions.Add(condition.Title &amp; \" - \" &amp; condition.Description)\nNext\n\n'Sort our conditions list\nconditions.Sort()\n\n'Set field with sorted conditions\nMacro.SetField(\"CX.CUSTOM.LOG\", String.Join(vbcrlf, conditions.ToArray()))\n</code></pre> <pre><code>//Create a list to hold our conditions in the format we want\n//the first element of each item will be used to sort\nSystem.Collections.Generic.List&lt;string&gt; conditions = new System.Collections.Generic.List&lt;string&gt;();\n\n//Loop through the Preliminary Conditions and add to list\nforeach (UnderwritingCondition condition in Loan.Log.UnderwritingConditions)\n{\n    conditions.Add(condition.Title + \" - \" + condition.Description);\n}\n\n//Sort our conditions list\nconditions.Sort();\n\n//Set field with sorted conditions\nMacro.SetField(\"CX.CUSTOM.LOG\", String.Join(Environment.NewLine, conditions.ToArray()));\n</code></pre>"},{"location":"IFB/SortConditions/#post-closing-conditions","title":"Post-Closing Conditions","text":"<p>The below provides the available properties and code to retrieve all Post-Closing conditions and sort them by condition title. Additional logic can be added as a filter to pull only conditions relative to the task.</p>"},{"location":"IFB/SortConditions/#properties_2","title":"Properties","text":"<p>Listed below are a condensed list of properties for a PostClosingCondition object. More can be found in the EncompassObjects Help file.</p> Name Description AddedBy User ID who added BorrowerPair Associated Borrower Pair Cleared Indicates if condition has been cleared ClearedBy User ID of user who cleared the condition DateAdded Date condition was added DateCleared Date condition was cleared DateExpected Expected date to be received DateReceived Date condition was received DateRequested Date condition was requested DateRerequested Date condition was rerequested DateSent Date condition was sent DaysToReceive Day from the date requested until the condition is due Description Conditions description PrintExternally Indicates if condition is to print externally PrintInternally Indicates if condition is to print internally Received Indicates if condition has been marked received ReceivedBy User ID of user who received the condition Recipient Indicates who is the recipient of the condition Requested Indicates if condition has been marked requested RequestedBy User ID of user who requested the condition RequestedFrom User the condition was requested from ReRequested Indicates if condition has been marked rerequested RerequestedBy User ID of user who rerequested the condition Sent Indicates if the condition has been marked sent SentBy User ID of user who sent the condition Status Current status of the condition Title Title of the condition"},{"location":"IFB/SortConditions/#code_2","title":"Code","text":"VBC# <pre><code>'Create a list to hold our conditions in the format we want\n'the first element of each item will be used to sort\nDim conditions As New System.Collections.Generic.List(Of String)\n\n'Loop through the Preliminary Conditions and add to list\nFor Each condition as PostClosingCondition in Loan.Log.PostClosingConditions\n    conditions.Add(condition.Title &amp; \" - \" &amp; condition.Description)\nNext\n\n'Sort our conditions list\nconditions.Sort()\n\n'Set field with sorted conditions\nMacro.SetField(\"CX.CUSTOM.LOG\", String.Join(vbcrlf, conditions.ToArray()))\n</code></pre> <pre><code>//Create a list to hold our conditions in the format we want\n//the first element of each item will be used to sort\nSystem.Collections.Generic.List&lt;string&gt; conditions = new System.Collections.Generic.List&lt;string&gt;();\n\n//Loop through the Preliminary Conditions and add to list\nforeach (PostClosingCondition condition in Loan.Log.PostClosingConditions)\n{\n    conditions.Add(condition.Title + \" - \" + condition.Description);\n}\n\n//Sort our conditions list\nconditions.Sort();\n\n//Set field with sorted conditions\nMacro.SetField(\"CX.CUSTOM.LOG\", String.Join(Environment.NewLine, conditions.ToArray()));\n</code></pre>"},{"location":"IFB/UserExports/","title":"User Information Export","text":""},{"location":"IFB/UserExports/#overview","title":"Overview","text":"<p>The below snippets help with exporting user data from Encompass. They can be used in combination with the Export to CSV to create a CSV file of user information.</p>"},{"location":"IFB/UserExports/#user-properties","title":"User Properties","text":"<p>The below are some of the properties found on a User object more can be found in the EncompassObjects.chm that is in the same folder the SDK is installed in:</p> Property Description Type AccountLocked Is the account allowed to login Boolean CellPhone Cell Phone Number String CHUMID CHUM ID String Email Email String EmployeeID Employee ID String Enabled Is the account enabled or disabled Boolean FailedLoginAttempts Number of failed login attempts Int32 Fax Fax Number String FirstName First Name String FullName Full Name String ID User login ID String JobTitle Title String LastName Last Name String MiddleName Middle Name String NMLSExpirationDate NMLS Expiration Date DateTime NMLSOriginatorID NMLS Number String Personas List of Personas UserPersonas Phone Phone Number String SSODisconnectedFromOrg SSO Settings inherited from OU Boolean SSOOnly SSO is enforced or not Boolean StateLicenses List of state licensing StateLicenses SubordinateLoanAccessRight Access rights to subordinate loans SubcordinatelLoanAccessRight Suffix Suffix String WorkingFolder Default working folder String"},{"location":"IFB/UserExports/#all-users","title":"All Users","text":"<p>The below gets all users information and adds them to a String Builder that can be used in an export or displayed in a multiline textbox control.</p> VBC# <pre><code>'Get All Users\nDim aUsers as UserList = Loan.Session.Users.GetAllUsers()\n'Create String Builder object\nDim stringB As New System.Text.StringBuilder()\n\n'Add headers for CSV\nstringB.AppendLine(\"UserID,Full Name,EmployeeID,Enabled,AccountLocked,WorkingFolder\")\n\n'Add Data\nFor Each u as User in aUsers\n    stringB.AppendLine(u.ID &amp; \",\" &amp; u.FullName &amp; \",\" &amp; u.EmployeeID &amp; \",\" &amp; u.Enabled.ToString() &amp; \",\" &amp; u.AccountLocked.ToString() &amp; \",\" &amp; u.WorkingFolder)\nNext\n</code></pre> <pre><code>//Get All Users\nUserList aUsers = Loan.Session.Users.GetAllUsers();\n//Create String Builder object\nSystem.Text.StringBuilder stringB = new System.Text.StringBuilder();\n\n//Add headers for CSV\nstringB.AppendLine(\"UserID,Full Name,EmployeeID,Enabled,AccountLocked,WorkingFolder\");\n\n//Add Data\nforeach (User u in aUsers)\n{\n    stringB.AppendLine(u.ID + \",\" + u.FullName + \",\" + u.EmployeeID + \",\" + u.Enabled.ToString() + \",\" + u.AccountLocked.ToString() + \",\" + u.WorkingFolder);\n}\n</code></pre>"},{"location":"IFB/UserExports/#persona-users","title":"Persona Users","text":"<p>The below first gets a persona by name and then gets all the users with that persona.</p> VBC# <pre><code>'Get Persona by name\nDim prsna as Persona = Loan.Session.Users.Personas.GetPersonaByName(\"Super Administrator\")\n'Get List of users with Persona\nDim pUsers as UserList = Loan.Session.Users.GetUsersWithPersona(prsna, false)\n'Create String Builder object\nDim stringB As New System.Text.StringBuilder()\n\n'Add headers for CSV\nstringB.AppendLine(\"UserID,Full Name,EmployeeID,Enabled,AccountLocked,WorkingFolder\")\n\n'Add Data\nFor Each u as User in pUsers\n    stringB.AppendLine(u.ID &amp; \",\" &amp; u.FullName &amp; \",\" &amp; u.EmployeeID &amp; \",\" &amp; u.Enabled.ToString() &amp; \",\" &amp; u.AccountLocked.ToString() &amp; \",\" &amp; u.WorkingFolder)\nNext\n</code></pre> <pre><code>//Get Persona by name\nPersona prsna = Loan.Session.Users.Personas.GetPersonaByName(\"Super Administrator\");\n//Get All Users\nUserList pUsers = Loan.Session.Users.GetUsersWithPersona(prsna, false);\n//Create String Builder object\nSystem.Text.StringBuilder stringB = new System.Text.StringBuilder();\n\n//Add headers for CSV\nstringB.AppendLine(\"UserID,Full Name,EmployeeID,Enabled,AccountLocked,WorkingFolder\");\n\n//Add Data\nforeach (User u in pUsers)\n{\n    stringB.AppendLine(u.ID + \",\" + u.FullName + \",\" + u.EmployeeID + \",\" + u.Enabled.ToString() + \",\" + u.AccountLocked.ToString() + \",\" + u.WorkingFolder);\n}\n</code></pre> <p>Info</p> <p>When getting users using this method, the only persona that will present in the users Personas list is the persona that was used for the lookup.</p>"},{"location":"IFB/UserExports/#user-group-users","title":"User Group users","text":"<p>The below gets all the users from a specific group.</p> VBC# <pre><code>'Get list of Users from User Group\nDim gUsers as UserList = Loan.Session.Users.Groups.GetGroupByName(\"Group Name\").GetUsers()\n'Create String Builder object\nDim stringB As New System.Text.StringBuilder()\n\n'Add headers for CSV\nstringB.AppendLine(\"UserID,Full Name,EmployeeID,Enabled,AccountLocked,WorkingFolder\")\n\n'Add Data\nFor Each u as User in gUsers\n    stringB.AppendLine(u.ID &amp; \",\" &amp; u.FullName &amp; \",\" &amp; u.EmployeeID &amp; \",\" &amp; u.Enabled.ToString() &amp; \",\" &amp; u.AccountLocked.ToString() &amp; \",\" &amp; u.WorkingFolder)\nNext\n</code></pre> <pre><code>//Get list of Users from User Group\nUserList gUsers = Loan.Session.Users.Groups.GetGroupByName(\"Group Name\").GetUsers();\n//Create String Builder object\nSystem.Text.StringBuilder stringB = new System.Text.StringBuilder();\n\n//Add headers for CSV\nstringB.AppendLine(\"UserID,Full Name,EmployeeID,Enabled,AccountLocked,WorkingFolder\");\n\n//Add Data\nforeach (User u in gUsers)\n{\n    stringB.AppendLine(u.ID + \",\" + u.FullName + \",\" + u.EmployeeID + \",\" + u.Enabled.ToString() + \",\" + u.AccountLocked.ToString() + \",\" + u.WorkingFolder);\n}\n</code></pre>"},{"location":"IFB/ValidateDataEntry/","title":"Validate Data Entry","text":""},{"location":"IFB/ValidateDataEntry/#overview","title":"Overview","text":"<p>Sometimes we need to verify that data has been entered into a control or field before something else can happen on a form. We can do this in various ways depending on how many and what type of data we are verifying.</p>"},{"location":"IFB/ValidateDataEntry/#single-control","title":"Single Control","text":"<p>If we need to verify that a control has a value before something happens we can use the below to check if the value of the control is not empty.</p> <p>Note</p> <p>Below I am just checking if a Textbox control has a value, and while most controls have a value property there are some that may not. Make sure to check and adjust as needed to your particular control type.</p> VBC# <pre><code>'txtTextTest is a textbox control\nIf txtTextTest.Value  = Nothing Then\n    Msgbox(\"No value found\", 48, \"No value\")\nEnd If\n</code></pre> <pre><code>//txtTextTest is a textbox control\nif (txtTextTest.Value == \"\")\n{\n    Macro.Alert(\"No value found.\");\n}\n</code></pre>"},{"location":"IFB/ValidateDataEntry/#multiple-controls","title":"Multiple Controls","text":""},{"location":"IFB/ValidateDataEntry/#same-control-type","title":"Same Control Type","text":"<p>If we need to verify multiple controls and they happen to be of the same control type we can use something like the below to verify if the set of controls have data.</p> <p>Note</p> <p>The below assumes that each control is mapped to the same field type and the field type is blank when no value is set. For controls that are mapped to field types that default a value, like the date field type defaulting to // when empty, check further down.</p> VBC# <pre><code>'Declare a array of Textboxes to verify\nDim textboxes() as Textbox = {txtTextTest, txtDcmlTest, txtDateTest}\n\n'Loop through each textbox and see if the\n'value is set to nothing\nFor Each tb as Textbox in  textboxes\n    'Value is nothing, alert the user or\n    'do something else on the form\n    If tb.Value = Nothing Then\n        Msgbox(\"No value found\", 48, \"No value\")\n    End If\nNext\n</code></pre> <pre><code>//Declare a array of Textboxes to verify\nTextBox[] textboxes = {txtTextTest, txtDcmlTest, txtDateTest};\n\n//Loop through each textbox and see if the\n//value is set to blank\nforeach (TextBox tb in textboxes)\n{\n    //Value is blank, alert the user or\n    //do somethign else on the form\n    if (tb.Value == \"\")\n    {\n        Macro.Alert(\"No value found.\");\n    }\n}\n</code></pre>"},{"location":"IFB/ValidateDataEntry/#same-field-type","title":"Same Field Type","text":"<p>Some fields have a different default value than just blank when not filled out. Like the Date field type will default to // when empty. If we try to check a controls value for blank when it is mapped to a field like this it will not work as the value is // not nothing. In the case where all control types are the same and we have the same field types that do not default to blank we can use something like this:</p> VBC# <pre><code>'Declare a list of Textboxes to verify\nDim textboxes() as Textbox = {txt_761, txt_2301, txt_2987}\n\n'Loop through each textbox and check for\n'field specific blank value\nFor Each tb as Textbox in  textboxes\n    'For a Date field // would be blank\n    'Alert the user or do something on the form\n    If tb.Value = \"//\" Then\n        Msgbox(\"No value found\", 48, \"No value\")\n    End If\nNext\n</code></pre> <pre><code>//Declare a list of Textboxes to verify\nTextBox[] textboxes = {txt_761, txt_2301, txt_2987};\n\n//Loop through each textbox and check for\n//field specific blank value\nforeach (TextBox tb in textboxes)\n{\n    //For a Date field // would be blank\n    //Alert the user or do something on the form\n    if (tb.Value == \"//\")\n    {\n        Macro.Alert(\"No value found.\");\n    }\n}\n</code></pre>"},{"location":"IFB/ValidateDataEntry/#various-field-types","title":"Various Field Types","text":"<p>If we have various control types and various field types we can use the below to check if they are blank. What the below does is takes a list of controls and then gets the field bound to the control. Based on that fields type we can implement a check to see if the field is considered blank.</p> <p>Note</p> <p>The below example oh take in account for String, Decimal_2, and Date field types. More field types can be found in the EncompassObjects Help file.</p> VBC# <pre><code>'Declare a array of controlIDs that we want to verify\nDim controls() as String  = {\"txtTextTest\", \"txtDcmlTest\", \"txtDateTest\"}\n\n'Create a boolean to hold if data is missing\nDim missing_data as Boolean = False\n\n'Loop through controls and check mapped fields for\n'missing data\nFor Each control as String in controls\n    'Find the control based on the Control ID\n    Dim ctrl = FindControl(control)\n    'Get the field mapped to the control\n    Dim field as FieldDescriptor = ctrl.Field\n    'Get the value of the field\n    Dim field_value = Macro.GetField(field.FieldID)\n\n    'Based on the fields type check if empty\n    Select Case field.Format\n        'Format of field is String\n        Case 101\n            If String.IsNullorEmpty(field_value) Then\n                missing_data = True\n            End If\n        'Format of field is Decimal_2\n        Case 203\n            'Can add custom checks like treating 0.00 as an empty\n            'and not just checking for a blank field\n            If String.IsNullorEmpty(field_value) or field_value = \"0.00\" Then\n                missing_data = True\n            End If\n        'Format of field is Date\n        Case 301\n            If field_value = \"//\" Then\n                missing_data = True\n            End If\n    End Select\nNext\n\n'If any data is missing notify the user or\n'do some other action\nIf missing_data = True Then\n    Macro.Alert(\"Data is missing please verify.\")\nEnd If\n</code></pre> <pre><code>//Declare a array of controlIDs that we want to verify\nstring[] controls = {\"txtTextTest\", \"txtDcmlTest\", \"txtDateTest\"};\n\n//Create a boolean to hold if data is missing\nbool missing_data = false;\n\n//Loop through controls and check mapped field for\n//missing data\nforeach (string control in controls)\n{\n    //Find the control based on Control ID\n    var ctrl = (FieldControl)FindControl(control);\n    //Get the field mapped to the control\n    FieldDescriptor field = ctrl.Field;\n    //Get teh value of the field\n    string field_value = Macro.GetField(field.FieldID);\n\n    //Based on the fields type check if empty\n    switch (field.Format)\n    {\n        //Format of field is String\n        case LoanFieldFormat.STRING:\n            if (String.IsNullOrEmpty(field_value))\n            {\n                missing_data = true;\n            }\n            break;\n        //Format of field is Decimal_2\n        case LoanFieldFormat.DECIMAL_2:\n            //Can add custom check like treaking 0.00 as an empty\n            //and not just checking for a blank field\n            if (String.IsNullOrEmpty(field_value) || field_value == \"0.00\")\n            {\n                missing_data = true;\n            }\n            break;\n        //Format of field is Date\n        case LoanFieldFormat.DATE:\n            if (field_value == \"//\")\n            {\n                missing_data = true;\n            }\n            break;\n    }\n}\n\n//If any data is missing notify the user or\n//do some other action\nif (missing_data == true)\n{\n    Macro.Alert(\"Data is missing please verify.\");\n}\n</code></pre>"},{"location":"IFB/WorkingWithDateTime/","title":"Working With DateTime","text":""},{"location":"IFB/WorkingWithDateTime/#overview","title":"Overview","text":"<p>Time can be tricky sometimes, excpecially if you have users across multiple timezones. Below will take a look at not only how we can capture the date and time when an event happened but also various ways to format it.</p>"},{"location":"IFB/WorkingWithDateTime/#capturing-date-time","title":"Capturing Date Time","text":"<p>We can capture the date and time using the built in DateTime.Now or DateTime.UtcNow methods.</p> <p>DateTime.Now will capture the local time based on the time settings of the computer the user triggered the event. This can be handy if users are not in different timezones and you just need to capture when an event happens.</p> <p>If you do have users in different timezones then DateTime.UtcNow may be helpful as it captures the Greenwich Mean Timezone which can then be changed into a different timezone based on your need.</p> VBC# <pre><code>'This capture the local date time\nDim dt as DateTime = DateTime.Now\n\n'This capture the UTC date time\nDim dtUtc as DateTime = DateTime.UtcNow\n</code></pre> <pre><code>//This capture the local date time\nDateTime dt = DateTime.Now;\n\n//This capture the UTC date time\nDateTime dtUtc = DateTime.UtcNow;\n</code></pre>"},{"location":"IFB/WorkingWithDateTime/#string-formatting","title":"String Formatting","text":"<p>We can change the format of the string returned from the toString method for a date and time by passing in custom format string. Microsoft has a table available for all the format specifiers available that can be found here. Below are some examples and the date time string that would be produced.</p> VBC# <pre><code>'This capture the local date time\nDim dt as DateTime = DateTime.Now\n\n'Formats\ndt.ToString() '-&gt; 01/01/2024 7:00:00 AM\ndt.ToString(\"M/d/yy\") '-&gt; 1/1/2024\ndt.ToString(\"HH:mm:ss tt\") '-&gt; 7:00:00 AM\ndt.ToString(\"dddd, MM/dd/yyyy\") '-&gt; Monday, 01/01/2024\n</code></pre> <pre><code>//This capture the local date time\nDateTime dt = DateTime.Now;\n\n//Formats\ndt.ToString(); //-&gt; 01/01/2024 7:00:00 AM\ndt.ToString(\"M/d/yy\"); //-&gt; 1/1/2024\ndt.ToString(\"HH:mm:ss tt\"); //-&gt; 7:00:00 AM\ndt.ToString(\"dddd, MM/dd/yyyy\"); //-&gt; Monday, 01/01/2024\n</code></pre>"},{"location":"IFB/WorkingWithDateTime/#adding-timezone","title":"Adding Timezone","text":""},{"location":"IFB/WorkingWithDateTime/#function","title":"Function","text":"<p>While the timezone off set by using format specifiers such as \"zzz\" this will produce the hour off set. The timezone name can also be gotten using System.TimeZoneInfo.Local.Id but this returns the full name instead of the abbreviation. A function like below can be used to return the abbreviation from the timezone id, depending on the need and zones to cover this can be expanded to match.</p> <p>Warning</p> <p>I came across how to write the C# function recently inside the load event of a custom form and have not gotten a chance to fully test it out. As with all the code found on the internet make sure to test and understand before moving to a production environment.</p> VBC# <pre><code>'End Sub from load event\nEnd Sub\n\n\nPublic Function TimeZoneAbb(ByVal timeZone as string)\n    'ARGs:\n    'timeZone - TimeZone id\n\n    'Abbreviation to be returned\n    Dim abb as string = \"\"\n\n    'Set abb variable based on TimeZone id\n    Select Case timeZone\n            Case \"Eastern Standard Time\"\n                abb = \"ET\"\n            Case \"Central Standard Time\"\n                abb = \"CT\"\n            Case \"Mountain Standard Time\"\n                abb = \"MST\"\n            Case \"Pacific Standard Time\"\n                abb = \"PT\"\n            Case Else\n                abb = \"TZ Unknown\"\n    End Select\n\n    'Return abbreviation\n    return abb\n\nEnd Function\n\n'Declare new sub to match with original load subs End Sub\nPublic Sub DummySub()\n</code></pre> <pre><code>//End of load event\n}\n\n//New class that holds custom methods to be used\nprivate class CustomMethods\n{   \n    public static string TimeZoneAbb(string timeZone)\n    {\n        /*\n        *ARGs:\n        *timeZone - TimeZone id\n        */\n\n        //Abbreviation to be returned\n        string abb = \"\";\n\n        //Set abb variable based on TimeZone id\n        switch(timeZone)\n        {\n            case \"Eastern Standard Time\":\n                abb = \"ET\";\n                break;\n            case \"Central Standard Time\":\n                abb = \"CT\";\n                break;\n            case \"Mountain Standard Time\":\n                abb = \"MST\";\n                break;\n            case \"Pacific Standard Time\":\n                abb = \"PT\";\n                break;\n            default:\n                abb = \"TZ Unknown\";\n                break;\n        }\n\n        return abb;\n    }\n\n//Do not add a } for new class as there is already one\n//from the original load event  \n</code></pre>"},{"location":"IFB/WorkingWithDateTime/#calling-function","title":"Calling Function","text":"<p>To call the function created above add it to an event of a control. Below is an example of a button click event that adds the date time with timezone to a multiline textbox.</p> VBC# <pre><code>'Get the local date time\nDim dt as DateTime = DateTime.Now\n\n'Get Timezone abbreviation of local timezone\nDim tzInfo = TimeZoneAbb(System.TimeZoneInfo.Local.Id)\n\n'Set textbox with date time with zone abbreviation\nmtxtLog.Text += dt.ToString(\"MM/dd/yyyy HH:mm tt \") &amp; tzInfo '-&gt; 01/01/2024 12:00 PM CT\n</code></pre> <pre><code>//Get the local date time\nDateTime dt = DateTime.Now;\n\n//Get Timezone abbreviation of local timezone\nstring tzInfo = CustomMethods.TimeZoneAbb(System.TimeZoneInfo.Local.Id);\n\n//Set textbox with date time with zone abbreviation\nmtxtLog.Text += dt.ToString(\"MM/dd/yyyy HH:mm tt \") + tzInfo; //-&gt; 01/01/2024 12:00 PM CT\n</code></pre>"}]}